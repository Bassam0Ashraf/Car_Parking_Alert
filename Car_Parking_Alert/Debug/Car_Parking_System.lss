
Car_Parking_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  000033a8  0000343c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800188  00800188  00003564  2**0
                  ALLOC
  3 .stab         000029ac  00000000  00000000  00003564  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f7d  00000000  00000000  00005f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000702d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000721f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000962a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000bb88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000bd48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c03e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c9ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 3d 0c 	jmp	0x187a	; 0x187a <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 d2 19 	jmp	0x33a4	; 0x33a4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 72 19 	jmp	0x32e4	; 0x32e4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 72 19 	jmp	0x32e4	; 0x32e4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5e 19 	jmp	0x32bc	; 0x32bc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e8       	ldi	r22, 0x80	; 128
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 7a 19 	jmp	0x32f4	; 0x32f4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 66 19 	jmp	0x32cc	; 0x32cc <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 5e 19 	jmp	0x32bc	; 0x32bc <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 7a 19 	jmp	0x32f4	; 0x32f4 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 57       	subi	r30, 0x78	; 120
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:
/*******************************************************************************
 *                     		  Main Program                                     *
 *******************************************************************************/

int main()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	6e 97       	sbiw	r28, 0x1e	; 30
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
	/* Initialize all drivers we need. */
	LCD_init();				/* Initialize LCD driver */
     e42:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <LCD_init>
	LCD_clearScreen();		/* Clear any text on LCD */
     e46:	0e 94 6f 17 	call	0x2ede	; 0x2ede <LCD_clearScreen>
	Ultrasonic_init();		/* Initialize Ultrasonic Sensor driver */
     e4a:	0e 94 00 18 	call	0x3000	; 0x3000 <Ultrasonic_init>
	Buzzer_init();			/* Initialize buzzer driver */
     e4e:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Buzzer_init>
	LEDS_init();			/* Initialize LEDs driver */
     e52:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <LEDS_init>

	/* Enable global interrupt by set "1" to register SREG */
	SREG |= (1 << 7);
     e56:	af e5       	ldi	r26, 0x5F	; 95
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	ef e5       	ldi	r30, 0x5F	; 95
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	80 68       	ori	r24, 0x80	; 128
     e62:	8c 93       	st	X, r24
	/* Define variable to store distance on it */
	uint16 distance;


	/* Display string "Distance =" & "cm" on LCD */
	LCD_displayString("Distance = ");
     e64:	80 e6       	ldi	r24, 0x60	; 96
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_displayString>
	LCD_displayStringRowColumn(0, 14, "cm");
     e6c:	2c e6       	ldi	r18, 0x6C	; 108
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	6e e0       	ldi	r22, 0x0E	; 14
     e74:	a9 01       	movw	r20, r18
     e76:	0e 94 33 17 	call	0x2e66	; 0x2e66 <LCD_displayStringRowColumn>


	for(;;)
	{
		/* Display distance on LCD */
		LCD_moveCursor(0, 11);
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	6b e0       	ldi	r22, 0x0B	; 11
     e7e:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <LCD_moveCursor>
		distance = Ultrasonic_readDistance();
     e82:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <Ultrasonic_readDistance>
     e86:	9e 8f       	std	Y+30, r25	; 0x1e
     e88:	8d 8f       	std	Y+29, r24	; 0x1d
		if (distance < 10)
     e8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e8e:	8a 30       	cpi	r24, 0x0A	; 10
     e90:	91 05       	cpc	r25, r1
     e92:	48 f4       	brcc	.+18     	; 0xea6 <main+0x78>
		{
			/* To clear the second digits after the number */
			LCD_intgerToString(distance);
     e94:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e96:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e98:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_intgerToString>
			LCD_displayString("  ");
     e9c:	8f e6       	ldi	r24, 0x6F	; 111
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_displayString>
     ea4:	04 c0       	rjmp	.+8      	; 0xeae <main+0x80>
		}
		else
		{
			LCD_intgerToString(distance);
     ea6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ea8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     eaa:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_intgerToString>
		}

		/* LEDs and buzzer control */
		if(distance >= 20)
     eae:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eb0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     eb2:	84 31       	cpi	r24, 0x14	; 20
     eb4:	91 05       	cpc	r25, r1
     eb6:	60 f0       	brcs	.+24     	; 0xed0 <main+0xa2>
		{
			LED_off( LED_RED );
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LED_off>
			LED_off( LED_GREEN );
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LED_off>
			LED_off( LED_BLUE );
     ec4:	82 e0       	ldi	r24, 0x02	; 2
     ec6:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LED_off>
			Buzzer_off();
     eca:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Buzzer_off>
     ece:	d5 cf       	rjmp	.-86     	; 0xe7a <main+0x4c>
		}
		else if (distance >= 16 && distance <= 20)
     ed0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ed2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ed4:	80 31       	cpi	r24, 0x10	; 16
     ed6:	91 05       	cpc	r25, r1
     ed8:	88 f0       	brcs	.+34     	; 0xefc <main+0xce>
     eda:	8d 8d       	ldd	r24, Y+29	; 0x1d
     edc:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ede:	85 31       	cpi	r24, 0x15	; 21
     ee0:	91 05       	cpc	r25, r1
     ee2:	60 f4       	brcc	.+24     	; 0xefc <main+0xce>
		{
			LED_on( LED_RED );
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LED_on>
			LED_off( LED_GREEN );
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LED_off>
			LED_off( LED_BLUE );
     ef0:	82 e0       	ldi	r24, 0x02	; 2
     ef2:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LED_off>
			Buzzer_off();
     ef6:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Buzzer_off>
     efa:	bf cf       	rjmp	.-130    	; 0xe7a <main+0x4c>
		}
		else if (distance >= 11 && distance <= 15)
     efc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     efe:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f00:	8b 30       	cpi	r24, 0x0B	; 11
     f02:	91 05       	cpc	r25, r1
     f04:	88 f0       	brcs	.+34     	; 0xf28 <main+0xfa>
     f06:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f08:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f0a:	80 31       	cpi	r24, 0x10	; 16
     f0c:	91 05       	cpc	r25, r1
     f0e:	60 f4       	brcc	.+24     	; 0xf28 <main+0xfa>
		{
			LED_on( LED_RED );
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LED_on>
			LED_on( LED_GREEN );
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LED_on>
			LED_off( LED_BLUE );
     f1c:	82 e0       	ldi	r24, 0x02	; 2
     f1e:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LED_off>
			Buzzer_off();
     f22:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Buzzer_off>
     f26:	a9 cf       	rjmp	.-174    	; 0xe7a <main+0x4c>
		}
		else if (distance >= 6 && distance <= 10)
     f28:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f2c:	86 30       	cpi	r24, 0x06	; 6
     f2e:	91 05       	cpc	r25, r1
     f30:	88 f0       	brcs	.+34     	; 0xf54 <main+0x126>
     f32:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f34:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f36:	8b 30       	cpi	r24, 0x0B	; 11
     f38:	91 05       	cpc	r25, r1
     f3a:	60 f4       	brcc	.+24     	; 0xf54 <main+0x126>
		{
			LED_on( LED_RED );
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LED_on>
			LED_on( LED_GREEN );
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LED_on>
			LED_on( LED_BLUE );
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LED_on>
			Buzzer_off();
     f4e:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Buzzer_off>
     f52:	93 cf       	rjmp	.-218    	; 0xe7a <main+0x4c>
		}
		else
		{
			/* Display waring massage "STOP !" on LCD */
			LCD_displayStringRowColumn(1, 6, "STOP !");
     f54:	22 e7       	ldi	r18, 0x72	; 114
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	66 e0       	ldi	r22, 0x06	; 6
     f5c:	a9 01       	movw	r20, r18
     f5e:	0e 94 33 17 	call	0x2e66	; 0x2e66 <LCD_displayStringRowColumn>
     f62:	14 c1       	rjmp	.+552    	; 0x118c <main+0x35e>

			while( distance <= MINIMUM_SAFTY_DISTANCE_IN_CM )
			{
				/* Flashing all LEDs and buzzer for warning */
				Buzzer_on();
     f64:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Buzzer_on>
				LED_on( LED_RED );
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LED_on>
				LED_on( LED_GREEN );
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LED_on>
				LED_on( LED_BLUE );
     f74:	82 e0       	ldi	r24, 0x02	; 2
     f76:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <LED_on>
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	a8 e4       	ldi	r26, 0x48	; 72
     f80:	b3 e4       	ldi	r27, 0x43	; 67
     f82:	89 8f       	std	Y+25, r24	; 0x19
     f84:	9a 8f       	std	Y+26, r25	; 0x1a
     f86:	ab 8f       	std	Y+27, r26	; 0x1b
     f88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f8a:	69 8d       	ldd	r22, Y+25	; 0x19
     f8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f90:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	4a e7       	ldi	r20, 0x7A	; 122
     f98:	55 e4       	ldi	r21, 0x45	; 69
     f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	8d 8b       	std	Y+21, r24	; 0x15
     fa4:	9e 8b       	std	Y+22, r25	; 0x16
     fa6:	af 8b       	std	Y+23, r26	; 0x17
     fa8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     faa:	6d 89       	ldd	r22, Y+21	; 0x15
     fac:	7e 89       	ldd	r23, Y+22	; 0x16
     fae:	8f 89       	ldd	r24, Y+23	; 0x17
     fb0:	98 8d       	ldd	r25, Y+24	; 0x18
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	40 e8       	ldi	r20, 0x80	; 128
     fb8:	5f e3       	ldi	r21, 0x3F	; 63
     fba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fbe:	88 23       	and	r24, r24
     fc0:	2c f4       	brge	.+10     	; 0xfcc <main+0x19e>
		__ticks = 1;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	9c 8b       	std	Y+20, r25	; 0x14
     fc8:	8b 8b       	std	Y+19, r24	; 0x13
     fca:	3f c0       	rjmp	.+126    	; 0x104a <main+0x21c>
	else if (__tmp > 65535)
     fcc:	6d 89       	ldd	r22, Y+21	; 0x15
     fce:	7e 89       	ldd	r23, Y+22	; 0x16
     fd0:	8f 89       	ldd	r24, Y+23	; 0x17
     fd2:	98 8d       	ldd	r25, Y+24	; 0x18
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	3f ef       	ldi	r19, 0xFF	; 255
     fd8:	4f e7       	ldi	r20, 0x7F	; 127
     fda:	57 e4       	ldi	r21, 0x47	; 71
     fdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fe0:	18 16       	cp	r1, r24
     fe2:	4c f5       	brge	.+82     	; 0x1036 <main+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe4:	69 8d       	ldd	r22, Y+25	; 0x19
     fe6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fe8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fea:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e2       	ldi	r20, 0x20	; 32
     ff2:	51 e4       	ldi	r21, 0x41	; 65
     ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	bc 01       	movw	r22, r24
     ffe:	cd 01       	movw	r24, r26
    1000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	9c 8b       	std	Y+20, r25	; 0x14
    100a:	8b 8b       	std	Y+19, r24	; 0x13
    100c:	0f c0       	rjmp	.+30     	; 0x102c <main+0x1fe>
    100e:	80 e9       	ldi	r24, 0x90	; 144
    1010:	91 e0       	ldi	r25, 0x01	; 1
    1012:	9a 8b       	std	Y+18, r25	; 0x12
    1014:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1016:	89 89       	ldd	r24, Y+17	; 0x11
    1018:	9a 89       	ldd	r25, Y+18	; 0x12
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <main+0x1ec>
    101e:	9a 8b       	std	Y+18, r25	; 0x12
    1020:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1022:	8b 89       	ldd	r24, Y+19	; 0x13
    1024:	9c 89       	ldd	r25, Y+20	; 0x14
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	9c 8b       	std	Y+20, r25	; 0x14
    102a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    102c:	8b 89       	ldd	r24, Y+19	; 0x13
    102e:	9c 89       	ldd	r25, Y+20	; 0x14
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	69 f7       	brne	.-38     	; 0x100e <main+0x1e0>
    1034:	14 c0       	rjmp	.+40     	; 0x105e <main+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1036:	6d 89       	ldd	r22, Y+21	; 0x15
    1038:	7e 89       	ldd	r23, Y+22	; 0x16
    103a:	8f 89       	ldd	r24, Y+23	; 0x17
    103c:	98 8d       	ldd	r25, Y+24	; 0x18
    103e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	9c 8b       	std	Y+20, r25	; 0x14
    1048:	8b 8b       	std	Y+19, r24	; 0x13
    104a:	8b 89       	ldd	r24, Y+19	; 0x13
    104c:	9c 89       	ldd	r25, Y+20	; 0x14
    104e:	98 8b       	std	Y+16, r25	; 0x10
    1050:	8f 87       	std	Y+15, r24	; 0x0f
    1052:	8f 85       	ldd	r24, Y+15	; 0x0f
    1054:	98 89       	ldd	r25, Y+16	; 0x10
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <main+0x228>
    105a:	98 8b       	std	Y+16, r25	; 0x10
    105c:	8f 87       	std	Y+15, r24	; 0x0f

				_delay_ms(200);

				Buzzer_off();
    105e:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Buzzer_off>
				LED_off( LED_RED );
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LED_off>
				LED_off( LED_GREEN );
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LED_off>
				LED_off( LED_BLUE );
    106e:	82 e0       	ldi	r24, 0x02	; 2
    1070:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LED_off>
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	a8 e4       	ldi	r26, 0x48	; 72
    107a:	b3 e4       	ldi	r27, 0x43	; 67
    107c:	8b 87       	std	Y+11, r24	; 0x0b
    107e:	9c 87       	std	Y+12, r25	; 0x0c
    1080:	ad 87       	std	Y+13, r26	; 0x0d
    1082:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1084:	6b 85       	ldd	r22, Y+11	; 0x0b
    1086:	7c 85       	ldd	r23, Y+12	; 0x0c
    1088:	8d 85       	ldd	r24, Y+13	; 0x0d
    108a:	9e 85       	ldd	r25, Y+14	; 0x0e
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	4a e7       	ldi	r20, 0x7A	; 122
    1092:	55 e4       	ldi	r21, 0x45	; 69
    1094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	8f 83       	std	Y+7, r24	; 0x07
    109e:	98 87       	std	Y+8, r25	; 0x08
    10a0:	a9 87       	std	Y+9, r26	; 0x09
    10a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10a4:	6f 81       	ldd	r22, Y+7	; 0x07
    10a6:	78 85       	ldd	r23, Y+8	; 0x08
    10a8:	89 85       	ldd	r24, Y+9	; 0x09
    10aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	40 e8       	ldi	r20, 0x80	; 128
    10b2:	5f e3       	ldi	r21, 0x3F	; 63
    10b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10b8:	88 23       	and	r24, r24
    10ba:	2c f4       	brge	.+10     	; 0x10c6 <main+0x298>
		__ticks = 1;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	9e 83       	std	Y+6, r25	; 0x06
    10c2:	8d 83       	std	Y+5, r24	; 0x05
    10c4:	3f c0       	rjmp	.+126    	; 0x1144 <main+0x316>
	else if (__tmp > 65535)
    10c6:	6f 81       	ldd	r22, Y+7	; 0x07
    10c8:	78 85       	ldd	r23, Y+8	; 0x08
    10ca:	89 85       	ldd	r24, Y+9	; 0x09
    10cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	3f ef       	ldi	r19, 0xFF	; 255
    10d2:	4f e7       	ldi	r20, 0x7F	; 127
    10d4:	57 e4       	ldi	r21, 0x47	; 71
    10d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10da:	18 16       	cp	r1, r24
    10dc:	4c f5       	brge	.+82     	; 0x1130 <main+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10de:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	40 e2       	ldi	r20, 0x20	; 32
    10ec:	51 e4       	ldi	r21, 0x41	; 65
    10ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	bc 01       	movw	r22, r24
    10f8:	cd 01       	movw	r24, r26
    10fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	9e 83       	std	Y+6, r25	; 0x06
    1104:	8d 83       	std	Y+5, r24	; 0x05
    1106:	0f c0       	rjmp	.+30     	; 0x1126 <main+0x2f8>
    1108:	80 e9       	ldi	r24, 0x90	; 144
    110a:	91 e0       	ldi	r25, 0x01	; 1
    110c:	9c 83       	std	Y+4, r25	; 0x04
    110e:	8b 83       	std	Y+3, r24	; 0x03
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	9c 81       	ldd	r25, Y+4	; 0x04
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	f1 f7       	brne	.-4      	; 0x1114 <main+0x2e6>
    1118:	9c 83       	std	Y+4, r25	; 0x04
    111a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    111c:	8d 81       	ldd	r24, Y+5	; 0x05
    111e:	9e 81       	ldd	r25, Y+6	; 0x06
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	9e 83       	std	Y+6, r25	; 0x06
    1124:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1126:	8d 81       	ldd	r24, Y+5	; 0x05
    1128:	9e 81       	ldd	r25, Y+6	; 0x06
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	69 f7       	brne	.-38     	; 0x1108 <main+0x2da>
    112e:	14 c0       	rjmp	.+40     	; 0x1158 <main+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1130:	6f 81       	ldd	r22, Y+7	; 0x07
    1132:	78 85       	ldd	r23, Y+8	; 0x08
    1134:	89 85       	ldd	r24, Y+9	; 0x09
    1136:	9a 85       	ldd	r25, Y+10	; 0x0a
    1138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	9e 83       	std	Y+6, r25	; 0x06
    1142:	8d 83       	std	Y+5, r24	; 0x05
    1144:	8d 81       	ldd	r24, Y+5	; 0x05
    1146:	9e 81       	ldd	r25, Y+6	; 0x06
    1148:	9a 83       	std	Y+2, r25	; 0x02
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	9a 81       	ldd	r25, Y+2	; 0x02
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	f1 f7       	brne	.-4      	; 0x1150 <main+0x322>
    1154:	9a 83       	std	Y+2, r25	; 0x02
    1156:	89 83       	std	Y+1, r24	; 0x01

				_delay_ms(200);

				/* Continue displaying distance on LCD */
				LCD_moveCursor(0, 11);
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	6b e0       	ldi	r22, 0x0B	; 11
    115c:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <LCD_moveCursor>
				distance = Ultrasonic_readDistance();
    1160:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <Ultrasonic_readDistance>
    1164:	9e 8f       	std	Y+30, r25	; 0x1e
    1166:	8d 8f       	std	Y+29, r24	; 0x1d
				if (distance < 10)
    1168:	8d 8d       	ldd	r24, Y+29	; 0x1d
    116a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    116c:	8a 30       	cpi	r24, 0x0A	; 10
    116e:	91 05       	cpc	r25, r1
    1170:	48 f4       	brcc	.+18     	; 0x1184 <main+0x356>
				{
					/* To clear the second digits after the number */
					LCD_intgerToString(distance);
    1172:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1174:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1176:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_intgerToString>
					LCD_displayString("  ");
    117a:	8f e6       	ldi	r24, 0x6F	; 111
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_displayString>
    1182:	04 c0       	rjmp	.+8      	; 0x118c <main+0x35e>
				}
				else
				{
					LCD_intgerToString(distance);
    1184:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1186:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1188:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_intgerToString>
		else
		{
			/* Display waring massage "STOP !" on LCD */
			LCD_displayStringRowColumn(1, 6, "STOP !");

			while( distance <= MINIMUM_SAFTY_DISTANCE_IN_CM )
    118c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    118e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1190:	86 30       	cpi	r24, 0x06	; 6
    1192:	91 05       	cpc	r25, r1
    1194:	08 f4       	brcc	.+2      	; 0x1198 <main+0x36a>
    1196:	e6 ce       	rjmp	.-564    	; 0xf64 <main+0x136>
				}

			}

			/* Turn OFF buzzer and remove "STOP !" from LCD */
			Buzzer_off();
    1198:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Buzzer_off>
			LCD_displayStringRowColumn(1, 6, "      ");
    119c:	29 e7       	ldi	r18, 0x79	; 121
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	66 e0       	ldi	r22, 0x06	; 6
    11a4:	a9 01       	movw	r20, r18
    11a6:	0e 94 33 17 	call	0x2e66	; 0x2e66 <LCD_displayStringRowColumn>
    11aa:	67 ce       	rjmp	.-818    	; 0xe7a <main+0x4c>

000011ac <Buzzer_init>:
/*
 * Description :
 * Function initializes the buzzer pin direction and turn off the buzzer.
 */
void Buzzer_init(void)
{
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
	/* Configure buzzer pin as OUTPUT pin */
	GPIO_setupPinDirection(BUZZER_PORT_ID , BUZZER_PIN_ID , PIN_OUTPUT);
    11b4:	82 e0       	ldi	r24, 0x02	; 2
    11b6:	65 e0       	ldi	r22, 0x05	; 5
    11b8:	41 e0       	ldi	r20, 0x01	; 1
    11ba:	0e 94 ff 08 	call	0x11fe	; 0x11fe <GPIO_setupPinDirection>

	/* Turn OFF buzzer */
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_LOW);
    11be:	82 e0       	ldi	r24, 0x02	; 2
    11c0:	65 e0       	ldi	r22, 0x05	; 5
    11c2:	40 e0       	ldi	r20, 0x00	; 0
    11c4:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
}
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <Buzzer_on>:
/*
 * Description :
 * Function activates the buzzer.
 */
void Buzzer_on(void)
{
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
	/* Turn ON buzzer */
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_HIGH);
    11d6:	82 e0       	ldi	r24, 0x02	; 2
    11d8:	65 e0       	ldi	r22, 0x05	; 5
    11da:	41 e0       	ldi	r20, 0x01	; 1
    11dc:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
}
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <Buzzer_off>:
/*
 * Description :
 * Function deactivates the buzzer.
 */
void Buzzer_off(void)
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
	/* Turn OFF buzzer */
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_LOW);
    11ee:	82 e0       	ldi	r24, 0x02	; 2
    11f0:	65 e0       	ldi	r22, 0x05	; 5
    11f2:	40 e0       	ldi	r20, 0x00	; 0
    11f4:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>

}
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	08 95       	ret

000011fe <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	00 d0       	rcall	.+0      	; 0x1204 <GPIO_setupPinDirection+0x6>
    1204:	00 d0       	rcall	.+0      	; 0x1206 <GPIO_setupPinDirection+0x8>
    1206:	0f 92       	push	r0
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	6a 83       	std	Y+2, r22	; 0x02
    1210:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	88 30       	cpi	r24, 0x08	; 8
    1216:	08 f0       	brcs	.+2      	; 0x121a <GPIO_setupPinDirection+0x1c>
    1218:	d5 c0       	rjmp	.+426    	; 0x13c4 <GPIO_setupPinDirection+0x1c6>
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	84 30       	cpi	r24, 0x04	; 4
    121e:	08 f0       	brcs	.+2      	; 0x1222 <GPIO_setupPinDirection+0x24>
    1220:	d1 c0       	rjmp	.+418    	; 0x13c4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	3d 83       	std	Y+5, r19	; 0x05
    122a:	2c 83       	std	Y+4, r18	; 0x04
    122c:	8c 81       	ldd	r24, Y+4	; 0x04
    122e:	9d 81       	ldd	r25, Y+5	; 0x05
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	91 05       	cpc	r25, r1
    1234:	09 f4       	brne	.+2      	; 0x1238 <GPIO_setupPinDirection+0x3a>
    1236:	43 c0       	rjmp	.+134    	; 0x12be <GPIO_setupPinDirection+0xc0>
    1238:	2c 81       	ldd	r18, Y+4	; 0x04
    123a:	3d 81       	ldd	r19, Y+5	; 0x05
    123c:	22 30       	cpi	r18, 0x02	; 2
    123e:	31 05       	cpc	r19, r1
    1240:	2c f4       	brge	.+10     	; 0x124c <GPIO_setupPinDirection+0x4e>
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
    1244:	9d 81       	ldd	r25, Y+5	; 0x05
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	71 f0       	breq	.+28     	; 0x1266 <GPIO_setupPinDirection+0x68>
    124a:	bc c0       	rjmp	.+376    	; 0x13c4 <GPIO_setupPinDirection+0x1c6>
    124c:	2c 81       	ldd	r18, Y+4	; 0x04
    124e:	3d 81       	ldd	r19, Y+5	; 0x05
    1250:	22 30       	cpi	r18, 0x02	; 2
    1252:	31 05       	cpc	r19, r1
    1254:	09 f4       	brne	.+2      	; 0x1258 <GPIO_setupPinDirection+0x5a>
    1256:	5f c0       	rjmp	.+190    	; 0x1316 <GPIO_setupPinDirection+0x118>
    1258:	8c 81       	ldd	r24, Y+4	; 0x04
    125a:	9d 81       	ldd	r25, Y+5	; 0x05
    125c:	83 30       	cpi	r24, 0x03	; 3
    125e:	91 05       	cpc	r25, r1
    1260:	09 f4       	brne	.+2      	; 0x1264 <GPIO_setupPinDirection+0x66>
    1262:	85 c0       	rjmp	.+266    	; 0x136e <GPIO_setupPinDirection+0x170>
    1264:	af c0       	rjmp	.+350    	; 0x13c4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	a1 f4       	brne	.+40     	; 0x1294 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    126c:	aa e3       	ldi	r26, 0x3A	; 58
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	ea e3       	ldi	r30, 0x3A	; 58
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <GPIO_setupPinDirection+0x8c>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <GPIO_setupPinDirection+0x88>
    128e:	84 2b       	or	r24, r20
    1290:	8c 93       	st	X, r24
    1292:	98 c0       	rjmp	.+304    	; 0x13c4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1294:	aa e3       	ldi	r26, 0x3A	; 58
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	ea e3       	ldi	r30, 0x3A	; 58
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	48 2f       	mov	r20, r24
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	02 2e       	mov	r0, r18
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <GPIO_setupPinDirection+0xb4>
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	0a 94       	dec	r0
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <GPIO_setupPinDirection+0xb0>
    12b6:	80 95       	com	r24
    12b8:	84 23       	and	r24, r20
    12ba:	8c 93       	st	X, r24
    12bc:	83 c0       	rjmp	.+262    	; 0x13c4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	a1 f4       	brne	.+40     	; 0x12ec <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    12c4:	a7 e3       	ldi	r26, 0x37	; 55
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e7 e3       	ldi	r30, 0x37	; 55
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <GPIO_setupPinDirection+0xe4>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <GPIO_setupPinDirection+0xe0>
    12e6:	84 2b       	or	r24, r20
    12e8:	8c 93       	st	X, r24
    12ea:	6c c0       	rjmp	.+216    	; 0x13c4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    12ec:	a7 e3       	ldi	r26, 0x37	; 55
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e7 e3       	ldi	r30, 0x37	; 55
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	48 2f       	mov	r20, r24
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 2e       	mov	r0, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <GPIO_setupPinDirection+0x10c>
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	0a 94       	dec	r0
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <GPIO_setupPinDirection+0x108>
    130e:	80 95       	com	r24
    1310:	84 23       	and	r24, r20
    1312:	8c 93       	st	X, r24
    1314:	57 c0       	rjmp	.+174    	; 0x13c4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	a1 f4       	brne	.+40     	; 0x1344 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    131c:	a4 e3       	ldi	r26, 0x34	; 52
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e4 e3       	ldi	r30, 0x34	; 52
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	48 2f       	mov	r20, r24
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 2e       	mov	r0, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <GPIO_setupPinDirection+0x13c>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	0a 94       	dec	r0
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <GPIO_setupPinDirection+0x138>
    133e:	84 2b       	or	r24, r20
    1340:	8c 93       	st	X, r24
    1342:	40 c0       	rjmp	.+128    	; 0x13c4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1344:	a4 e3       	ldi	r26, 0x34	; 52
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e4 e3       	ldi	r30, 0x34	; 52
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	48 2f       	mov	r20, r24
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	02 2e       	mov	r0, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <GPIO_setupPinDirection+0x164>
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	0a 94       	dec	r0
    1364:	e2 f7       	brpl	.-8      	; 0x135e <GPIO_setupPinDirection+0x160>
    1366:	80 95       	com	r24
    1368:	84 23       	and	r24, r20
    136a:	8c 93       	st	X, r24
    136c:	2b c0       	rjmp	.+86     	; 0x13c4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	a1 f4       	brne	.+40     	; 0x139c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1374:	a1 e3       	ldi	r26, 0x31	; 49
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e1 e3       	ldi	r30, 0x31	; 49
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <GPIO_setupPinDirection+0x194>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <GPIO_setupPinDirection+0x190>
    1396:	84 2b       	or	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	14 c0       	rjmp	.+40     	; 0x13c4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    139c:	a1 e3       	ldi	r26, 0x31	; 49
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e1 e3       	ldi	r30, 0x31	; 49
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	48 2f       	mov	r20, r24
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 2e       	mov	r0, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <GPIO_setupPinDirection+0x1bc>
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	0a 94       	dec	r0
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <GPIO_setupPinDirection+0x1b8>
    13be:	80 95       	com	r24
    13c0:	84 23       	and	r24, r20
    13c2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	00 d0       	rcall	.+0      	; 0x13da <GPIO_writePin+0x6>
    13da:	00 d0       	rcall	.+0      	; 0x13dc <GPIO_writePin+0x8>
    13dc:	0f 92       	push	r0
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	6a 83       	std	Y+2, r22	; 0x02
    13e6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	88 30       	cpi	r24, 0x08	; 8
    13ec:	08 f0       	brcs	.+2      	; 0x13f0 <GPIO_writePin+0x1c>
    13ee:	d5 c0       	rjmp	.+426    	; 0x159a <GPIO_writePin+0x1c6>
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	84 30       	cpi	r24, 0x04	; 4
    13f4:	08 f0       	brcs	.+2      	; 0x13f8 <GPIO_writePin+0x24>
    13f6:	d1 c0       	rjmp	.+418    	; 0x159a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	3d 83       	std	Y+5, r19	; 0x05
    1400:	2c 83       	std	Y+4, r18	; 0x04
    1402:	8c 81       	ldd	r24, Y+4	; 0x04
    1404:	9d 81       	ldd	r25, Y+5	; 0x05
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	91 05       	cpc	r25, r1
    140a:	09 f4       	brne	.+2      	; 0x140e <GPIO_writePin+0x3a>
    140c:	43 c0       	rjmp	.+134    	; 0x1494 <GPIO_writePin+0xc0>
    140e:	2c 81       	ldd	r18, Y+4	; 0x04
    1410:	3d 81       	ldd	r19, Y+5	; 0x05
    1412:	22 30       	cpi	r18, 0x02	; 2
    1414:	31 05       	cpc	r19, r1
    1416:	2c f4       	brge	.+10     	; 0x1422 <GPIO_writePin+0x4e>
    1418:	8c 81       	ldd	r24, Y+4	; 0x04
    141a:	9d 81       	ldd	r25, Y+5	; 0x05
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	71 f0       	breq	.+28     	; 0x143c <GPIO_writePin+0x68>
    1420:	bc c0       	rjmp	.+376    	; 0x159a <GPIO_writePin+0x1c6>
    1422:	2c 81       	ldd	r18, Y+4	; 0x04
    1424:	3d 81       	ldd	r19, Y+5	; 0x05
    1426:	22 30       	cpi	r18, 0x02	; 2
    1428:	31 05       	cpc	r19, r1
    142a:	09 f4       	brne	.+2      	; 0x142e <GPIO_writePin+0x5a>
    142c:	5f c0       	rjmp	.+190    	; 0x14ec <GPIO_writePin+0x118>
    142e:	8c 81       	ldd	r24, Y+4	; 0x04
    1430:	9d 81       	ldd	r25, Y+5	; 0x05
    1432:	83 30       	cpi	r24, 0x03	; 3
    1434:	91 05       	cpc	r25, r1
    1436:	09 f4       	brne	.+2      	; 0x143a <GPIO_writePin+0x66>
    1438:	85 c0       	rjmp	.+266    	; 0x1544 <GPIO_writePin+0x170>
    143a:	af c0       	rjmp	.+350    	; 0x159a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	a1 f4       	brne	.+40     	; 0x146a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1442:	ab e3       	ldi	r26, 0x3B	; 59
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	eb e3       	ldi	r30, 0x3B	; 59
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <GPIO_writePin+0x8c>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <GPIO_writePin+0x88>
    1464:	84 2b       	or	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	98 c0       	rjmp	.+304    	; 0x159a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    146a:	ab e3       	ldi	r26, 0x3B	; 59
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	eb e3       	ldi	r30, 0x3B	; 59
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	48 2f       	mov	r20, r24
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	02 2e       	mov	r0, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <GPIO_writePin+0xb4>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	0a 94       	dec	r0
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <GPIO_writePin+0xb0>
    148c:	80 95       	com	r24
    148e:	84 23       	and	r24, r20
    1490:	8c 93       	st	X, r24
    1492:	83 c0       	rjmp	.+262    	; 0x159a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	a1 f4       	brne	.+40     	; 0x14c2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    149a:	a8 e3       	ldi	r26, 0x38	; 56
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e8 e3       	ldi	r30, 0x38	; 56
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	48 2f       	mov	r20, r24
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	02 2e       	mov	r0, r18
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <GPIO_writePin+0xe4>
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	0a 94       	dec	r0
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <GPIO_writePin+0xe0>
    14bc:	84 2b       	or	r24, r20
    14be:	8c 93       	st	X, r24
    14c0:	6c c0       	rjmp	.+216    	; 0x159a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    14c2:	a8 e3       	ldi	r26, 0x38	; 56
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e8 e3       	ldi	r30, 0x38	; 56
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	48 2f       	mov	r20, r24
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	02 2e       	mov	r0, r18
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <GPIO_writePin+0x10c>
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	0a 94       	dec	r0
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <GPIO_writePin+0x108>
    14e4:	80 95       	com	r24
    14e6:	84 23       	and	r24, r20
    14e8:	8c 93       	st	X, r24
    14ea:	57 c0       	rjmp	.+174    	; 0x159a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	a1 f4       	brne	.+40     	; 0x151a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    14f2:	a5 e3       	ldi	r26, 0x35	; 53
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e5 e3       	ldi	r30, 0x35	; 53
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	48 2f       	mov	r20, r24
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <GPIO_writePin+0x13c>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <GPIO_writePin+0x138>
    1514:	84 2b       	or	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	40 c0       	rjmp	.+128    	; 0x159a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    151a:	a5 e3       	ldi	r26, 0x35	; 53
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e5 e3       	ldi	r30, 0x35	; 53
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	02 2e       	mov	r0, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <GPIO_writePin+0x164>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	0a 94       	dec	r0
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <GPIO_writePin+0x160>
    153c:	80 95       	com	r24
    153e:	84 23       	and	r24, r20
    1540:	8c 93       	st	X, r24
    1542:	2b c0       	rjmp	.+86     	; 0x159a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	81 30       	cpi	r24, 0x01	; 1
    1548:	a1 f4       	brne	.+40     	; 0x1572 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    154a:	a2 e3       	ldi	r26, 0x32	; 50
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e2 e3       	ldi	r30, 0x32	; 50
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	48 2f       	mov	r20, r24
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	02 2e       	mov	r0, r18
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <GPIO_writePin+0x194>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	0a 94       	dec	r0
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <GPIO_writePin+0x190>
    156c:	84 2b       	or	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	14 c0       	rjmp	.+40     	; 0x159a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1572:	a2 e3       	ldi	r26, 0x32	; 50
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e2 e3       	ldi	r30, 0x32	; 50
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	48 2f       	mov	r20, r24
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	02 2e       	mov	r0, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <GPIO_writePin+0x1bc>
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	0a 94       	dec	r0
    1592:	e2 f7       	brpl	.-8      	; 0x158c <GPIO_writePin+0x1b8>
    1594:	80 95       	com	r24
    1596:	84 23       	and	r24, r20
    1598:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <GPIO_readPin+0x6>
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <GPIO_readPin+0x8>
    15b2:	0f 92       	push	r0
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	8a 83       	std	Y+2, r24	; 0x02
    15ba:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    15bc:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	88 30       	cpi	r24, 0x08	; 8
    15c2:	08 f0       	brcs	.+2      	; 0x15c6 <GPIO_readPin+0x1c>
    15c4:	84 c0       	rjmp	.+264    	; 0x16ce <GPIO_readPin+0x124>
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	84 30       	cpi	r24, 0x04	; 4
    15ca:	08 f0       	brcs	.+2      	; 0x15ce <GPIO_readPin+0x24>
    15cc:	80 c0       	rjmp	.+256    	; 0x16ce <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	3d 83       	std	Y+5, r19	; 0x05
    15d6:	2c 83       	std	Y+4, r18	; 0x04
    15d8:	4c 81       	ldd	r20, Y+4	; 0x04
    15da:	5d 81       	ldd	r21, Y+5	; 0x05
    15dc:	41 30       	cpi	r20, 0x01	; 1
    15de:	51 05       	cpc	r21, r1
    15e0:	79 f1       	breq	.+94     	; 0x1640 <GPIO_readPin+0x96>
    15e2:	8c 81       	ldd	r24, Y+4	; 0x04
    15e4:	9d 81       	ldd	r25, Y+5	; 0x05
    15e6:	82 30       	cpi	r24, 0x02	; 2
    15e8:	91 05       	cpc	r25, r1
    15ea:	34 f4       	brge	.+12     	; 0x15f8 <GPIO_readPin+0x4e>
    15ec:	2c 81       	ldd	r18, Y+4	; 0x04
    15ee:	3d 81       	ldd	r19, Y+5	; 0x05
    15f0:	21 15       	cp	r18, r1
    15f2:	31 05       	cpc	r19, r1
    15f4:	69 f0       	breq	.+26     	; 0x1610 <GPIO_readPin+0x66>
    15f6:	6b c0       	rjmp	.+214    	; 0x16ce <GPIO_readPin+0x124>
    15f8:	4c 81       	ldd	r20, Y+4	; 0x04
    15fa:	5d 81       	ldd	r21, Y+5	; 0x05
    15fc:	42 30       	cpi	r20, 0x02	; 2
    15fe:	51 05       	cpc	r21, r1
    1600:	b9 f1       	breq	.+110    	; 0x1670 <GPIO_readPin+0xc6>
    1602:	8c 81       	ldd	r24, Y+4	; 0x04
    1604:	9d 81       	ldd	r25, Y+5	; 0x05
    1606:	83 30       	cpi	r24, 0x03	; 3
    1608:	91 05       	cpc	r25, r1
    160a:	09 f4       	brne	.+2      	; 0x160e <GPIO_readPin+0x64>
    160c:	49 c0       	rjmp	.+146    	; 0x16a0 <GPIO_readPin+0xf6>
    160e:	5f c0       	rjmp	.+190    	; 0x16ce <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1610:	e9 e3       	ldi	r30, 0x39	; 57
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	a9 01       	movw	r20, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <GPIO_readPin+0x7e>
    1624:	55 95       	asr	r21
    1626:	47 95       	ror	r20
    1628:	8a 95       	dec	r24
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <GPIO_readPin+0x7a>
    162c:	ca 01       	movw	r24, r20
    162e:	81 70       	andi	r24, 0x01	; 1
    1630:	90 70       	andi	r25, 0x00	; 0
    1632:	88 23       	and	r24, r24
    1634:	19 f0       	breq	.+6      	; 0x163c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	89 83       	std	Y+1, r24	; 0x01
    163a:	49 c0       	rjmp	.+146    	; 0x16ce <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    163c:	19 82       	std	Y+1, r1	; 0x01
    163e:	47 c0       	rjmp	.+142    	; 0x16ce <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1640:	e6 e3       	ldi	r30, 0x36	; 54
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	88 2f       	mov	r24, r24
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	a9 01       	movw	r20, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <GPIO_readPin+0xae>
    1654:	55 95       	asr	r21
    1656:	47 95       	ror	r20
    1658:	8a 95       	dec	r24
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <GPIO_readPin+0xaa>
    165c:	ca 01       	movw	r24, r20
    165e:	81 70       	andi	r24, 0x01	; 1
    1660:	90 70       	andi	r25, 0x00	; 0
    1662:	88 23       	and	r24, r24
    1664:	19 f0       	breq	.+6      	; 0x166c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	89 83       	std	Y+1, r24	; 0x01
    166a:	31 c0       	rjmp	.+98     	; 0x16ce <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    166c:	19 82       	std	Y+1, r1	; 0x01
    166e:	2f c0       	rjmp	.+94     	; 0x16ce <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1670:	e3 e3       	ldi	r30, 0x33	; 51
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a9 01       	movw	r20, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <GPIO_readPin+0xde>
    1684:	55 95       	asr	r21
    1686:	47 95       	ror	r20
    1688:	8a 95       	dec	r24
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <GPIO_readPin+0xda>
    168c:	ca 01       	movw	r24, r20
    168e:	81 70       	andi	r24, 0x01	; 1
    1690:	90 70       	andi	r25, 0x00	; 0
    1692:	88 23       	and	r24, r24
    1694:	19 f0       	breq	.+6      	; 0x169c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	19 c0       	rjmp	.+50     	; 0x16ce <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    169c:	19 82       	std	Y+1, r1	; 0x01
    169e:	17 c0       	rjmp	.+46     	; 0x16ce <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    16a0:	e0 e3       	ldi	r30, 0x30	; 48
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	88 2f       	mov	r24, r24
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	a9 01       	movw	r20, r18
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <GPIO_readPin+0x10e>
    16b4:	55 95       	asr	r21
    16b6:	47 95       	ror	r20
    16b8:	8a 95       	dec	r24
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <GPIO_readPin+0x10a>
    16bc:	ca 01       	movw	r24, r20
    16be:	81 70       	andi	r24, 0x01	; 1
    16c0:	90 70       	andi	r25, 0x00	; 0
    16c2:	88 23       	and	r24, r24
    16c4:	19 f0       	breq	.+6      	; 0x16cc <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	01 c0       	rjmp	.+2      	; 0x16ce <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    16cc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <GPIO_setupPortDirection+0x6>
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <GPIO_setupPortDirection+0x8>
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	89 83       	std	Y+1, r24	; 0x01
    16ee:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	84 30       	cpi	r24, 0x04	; 4
    16f4:	90 f5       	brcc	.+100    	; 0x175a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	3c 83       	std	Y+4, r19	; 0x04
    16fe:	2b 83       	std	Y+3, r18	; 0x03
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	9c 81       	ldd	r25, Y+4	; 0x04
    1704:	81 30       	cpi	r24, 0x01	; 1
    1706:	91 05       	cpc	r25, r1
    1708:	d1 f0       	breq	.+52     	; 0x173e <GPIO_setupPortDirection+0x5e>
    170a:	2b 81       	ldd	r18, Y+3	; 0x03
    170c:	3c 81       	ldd	r19, Y+4	; 0x04
    170e:	22 30       	cpi	r18, 0x02	; 2
    1710:	31 05       	cpc	r19, r1
    1712:	2c f4       	brge	.+10     	; 0x171e <GPIO_setupPortDirection+0x3e>
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	9c 81       	ldd	r25, Y+4	; 0x04
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	61 f0       	breq	.+24     	; 0x1734 <GPIO_setupPortDirection+0x54>
    171c:	1e c0       	rjmp	.+60     	; 0x175a <GPIO_setupPortDirection+0x7a>
    171e:	2b 81       	ldd	r18, Y+3	; 0x03
    1720:	3c 81       	ldd	r19, Y+4	; 0x04
    1722:	22 30       	cpi	r18, 0x02	; 2
    1724:	31 05       	cpc	r19, r1
    1726:	81 f0       	breq	.+32     	; 0x1748 <GPIO_setupPortDirection+0x68>
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	9c 81       	ldd	r25, Y+4	; 0x04
    172c:	83 30       	cpi	r24, 0x03	; 3
    172e:	91 05       	cpc	r25, r1
    1730:	81 f0       	breq	.+32     	; 0x1752 <GPIO_setupPortDirection+0x72>
    1732:	13 c0       	rjmp	.+38     	; 0x175a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1734:	ea e3       	ldi	r30, 0x3A	; 58
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	80 83       	st	Z, r24
    173c:	0e c0       	rjmp	.+28     	; 0x175a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    173e:	e7 e3       	ldi	r30, 0x37	; 55
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	80 83       	st	Z, r24
    1746:	09 c0       	rjmp	.+18     	; 0x175a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1748:	e4 e3       	ldi	r30, 0x34	; 52
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	80 83       	st	Z, r24
    1750:	04 c0       	rjmp	.+8      	; 0x175a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1752:	e1 e3       	ldi	r30, 0x31	; 49
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	80 83       	st	Z, r24
			break;
		}
	}
}
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	00 d0       	rcall	.+0      	; 0x176e <GPIO_writePort+0x6>
    176e:	00 d0       	rcall	.+0      	; 0x1770 <GPIO_writePort+0x8>
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	84 30       	cpi	r24, 0x04	; 4
    177c:	90 f5       	brcc	.+100    	; 0x17e2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	3c 83       	std	Y+4, r19	; 0x04
    1786:	2b 83       	std	Y+3, r18	; 0x03
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	9c 81       	ldd	r25, Y+4	; 0x04
    178c:	81 30       	cpi	r24, 0x01	; 1
    178e:	91 05       	cpc	r25, r1
    1790:	d1 f0       	breq	.+52     	; 0x17c6 <GPIO_writePort+0x5e>
    1792:	2b 81       	ldd	r18, Y+3	; 0x03
    1794:	3c 81       	ldd	r19, Y+4	; 0x04
    1796:	22 30       	cpi	r18, 0x02	; 2
    1798:	31 05       	cpc	r19, r1
    179a:	2c f4       	brge	.+10     	; 0x17a6 <GPIO_writePort+0x3e>
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	9c 81       	ldd	r25, Y+4	; 0x04
    17a0:	00 97       	sbiw	r24, 0x00	; 0
    17a2:	61 f0       	breq	.+24     	; 0x17bc <GPIO_writePort+0x54>
    17a4:	1e c0       	rjmp	.+60     	; 0x17e2 <GPIO_writePort+0x7a>
    17a6:	2b 81       	ldd	r18, Y+3	; 0x03
    17a8:	3c 81       	ldd	r19, Y+4	; 0x04
    17aa:	22 30       	cpi	r18, 0x02	; 2
    17ac:	31 05       	cpc	r19, r1
    17ae:	81 f0       	breq	.+32     	; 0x17d0 <GPIO_writePort+0x68>
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	9c 81       	ldd	r25, Y+4	; 0x04
    17b4:	83 30       	cpi	r24, 0x03	; 3
    17b6:	91 05       	cpc	r25, r1
    17b8:	81 f0       	breq	.+32     	; 0x17da <GPIO_writePort+0x72>
    17ba:	13 c0       	rjmp	.+38     	; 0x17e2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    17bc:	eb e3       	ldi	r30, 0x3B	; 59
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	80 83       	st	Z, r24
    17c4:	0e c0       	rjmp	.+28     	; 0x17e2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    17c6:	e8 e3       	ldi	r30, 0x38	; 56
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	80 83       	st	Z, r24
    17ce:	09 c0       	rjmp	.+18     	; 0x17e2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    17d0:	e5 e3       	ldi	r30, 0x35	; 53
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	80 83       	st	Z, r24
    17d8:	04 c0       	rjmp	.+8      	; 0x17e2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    17da:	e2 e3       	ldi	r30, 0x32	; 50
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	80 83       	st	Z, r24
			break;
		}
	}
}
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <GPIO_readPort+0x6>
    17f6:	00 d0       	rcall	.+0      	; 0x17f8 <GPIO_readPort+0x8>
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
    17fc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    17fe:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	84 30       	cpi	r24, 0x04	; 4
    1804:	90 f5       	brcc	.+100    	; 0x186a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	3c 83       	std	Y+4, r19	; 0x04
    180e:	2b 83       	std	Y+3, r18	; 0x03
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	9c 81       	ldd	r25, Y+4	; 0x04
    1814:	81 30       	cpi	r24, 0x01	; 1
    1816:	91 05       	cpc	r25, r1
    1818:	d1 f0       	breq	.+52     	; 0x184e <GPIO_readPort+0x5e>
    181a:	2b 81       	ldd	r18, Y+3	; 0x03
    181c:	3c 81       	ldd	r19, Y+4	; 0x04
    181e:	22 30       	cpi	r18, 0x02	; 2
    1820:	31 05       	cpc	r19, r1
    1822:	2c f4       	brge	.+10     	; 0x182e <GPIO_readPort+0x3e>
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	9c 81       	ldd	r25, Y+4	; 0x04
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	61 f0       	breq	.+24     	; 0x1844 <GPIO_readPort+0x54>
    182c:	1e c0       	rjmp	.+60     	; 0x186a <GPIO_readPort+0x7a>
    182e:	2b 81       	ldd	r18, Y+3	; 0x03
    1830:	3c 81       	ldd	r19, Y+4	; 0x04
    1832:	22 30       	cpi	r18, 0x02	; 2
    1834:	31 05       	cpc	r19, r1
    1836:	81 f0       	breq	.+32     	; 0x1858 <GPIO_readPort+0x68>
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	9c 81       	ldd	r25, Y+4	; 0x04
    183c:	83 30       	cpi	r24, 0x03	; 3
    183e:	91 05       	cpc	r25, r1
    1840:	81 f0       	breq	.+32     	; 0x1862 <GPIO_readPort+0x72>
    1842:	13 c0       	rjmp	.+38     	; 0x186a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1844:	e9 e3       	ldi	r30, 0x39	; 57
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	0e c0       	rjmp	.+28     	; 0x186a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    184e:	e6 e3       	ldi	r30, 0x36	; 54
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	09 c0       	rjmp	.+18     	; 0x186a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1858:	e3 e3       	ldi	r30, 0x33	; 51
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	89 83       	std	Y+1, r24	; 0x01
    1860:	04 c0       	rjmp	.+8      	; 0x186a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1862:	e0 e3       	ldi	r30, 0x30	; 48
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    186a:	89 81       	ldd	r24, Y+1	; 0x01
}
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	08 95       	ret

0000187a <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    187a:	1f 92       	push	r1
    187c:	0f 92       	push	r0
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	0f 92       	push	r0
    1882:	11 24       	eor	r1, r1
    1884:	2f 93       	push	r18
    1886:	3f 93       	push	r19
    1888:	4f 93       	push	r20
    188a:	5f 93       	push	r21
    188c:	6f 93       	push	r22
    188e:	7f 93       	push	r23
    1890:	8f 93       	push	r24
    1892:	9f 93       	push	r25
    1894:	af 93       	push	r26
    1896:	bf 93       	push	r27
    1898:	ef 93       	push	r30
    189a:	ff 93       	push	r31
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    18a4:	80 91 88 01 	lds	r24, 0x0188
    18a8:	90 91 89 01 	lds	r25, 0x0189
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	29 f0       	breq	.+10     	; 0x18ba <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    18b0:	e0 91 88 01 	lds	r30, 0x0188
    18b4:	f0 91 89 01 	lds	r31, 0x0189
    18b8:	09 95       	icall
	}
}
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	ff 91       	pop	r31
    18c0:	ef 91       	pop	r30
    18c2:	bf 91       	pop	r27
    18c4:	af 91       	pop	r26
    18c6:	9f 91       	pop	r25
    18c8:	8f 91       	pop	r24
    18ca:	7f 91       	pop	r23
    18cc:	6f 91       	pop	r22
    18ce:	5f 91       	pop	r21
    18d0:	4f 91       	pop	r20
    18d2:	3f 91       	pop	r19
    18d4:	2f 91       	pop	r18
    18d6:	0f 90       	pop	r0
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	0f 90       	pop	r0
    18dc:	1f 90       	pop	r1
    18de:	18 95       	reti

000018e0 <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	00 d0       	rcall	.+0      	; 0x18e6 <ICU_init+0x6>
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	9a 83       	std	Y+2, r25	; 0x02
    18ec:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
    18ee:	a1 e3       	ldi	r26, 0x31	; 49
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	e1 e3       	ldi	r30, 0x31	; 49
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	8f 7b       	andi	r24, 0xBF	; 191
    18fa:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    18fc:	ef e4       	ldi	r30, 0x4F	; 79
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	8c e0       	ldi	r24, 0x0C	; 12
    1902:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    1904:	ae e4       	ldi	r26, 0x4E	; 78
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	ee e4       	ldi	r30, 0x4E	; 78
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	98 2f       	mov	r25, r24
    1910:	98 7f       	andi	r25, 0xF8	; 248
    1912:	e9 81       	ldd	r30, Y+1	; 0x01
    1914:	fa 81       	ldd	r31, Y+2	; 0x02
    1916:	80 81       	ld	r24, Z
    1918:	89 2b       	or	r24, r25
    191a:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    191c:	ae e4       	ldi	r26, 0x4E	; 78
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	ee e4       	ldi	r30, 0x4E	; 78
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	28 2f       	mov	r18, r24
    1928:	2f 7b       	andi	r18, 0xBF	; 191
    192a:	e9 81       	ldd	r30, Y+1	; 0x01
    192c:	fa 81       	ldd	r31, Y+2	; 0x02
    192e:	81 81       	ldd	r24, Z+1	; 0x01
    1930:	88 2f       	mov	r24, r24
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	00 24       	eor	r0, r0
    1936:	96 95       	lsr	r25
    1938:	87 95       	ror	r24
    193a:	07 94       	ror	r0
    193c:	96 95       	lsr	r25
    193e:	87 95       	ror	r24
    1940:	07 94       	ror	r0
    1942:	98 2f       	mov	r25, r24
    1944:	80 2d       	mov	r24, r0
    1946:	82 2b       	or	r24, r18
    1948:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    194a:	ec e4       	ldi	r30, 0x4C	; 76
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	11 82       	std	Z+1, r1	; 0x01
    1950:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    1952:	e6 e4       	ldi	r30, 0x46	; 70
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	11 82       	std	Z+1, r1	; 0x01
    1958:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    195a:	a9 e5       	ldi	r26, 0x59	; 89
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e9 e5       	ldi	r30, 0x59	; 89
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	80 62       	ori	r24, 0x20	; 32
    1966:	8c 93       	st	X, r24
}
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	00 d0       	rcall	.+0      	; 0x1978 <ICU_setCallBack+0x6>
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	9a 83       	std	Y+2, r25	; 0x02
    197e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	9a 81       	ldd	r25, Y+2	; 0x02
    1984:	90 93 89 01 	sts	0x0189, r25
    1988:	80 93 88 01 	sts	0x0188, r24
}
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	0f 92       	push	r0
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    19a2:	ae e4       	ldi	r26, 0x4E	; 78
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	ee e4       	ldi	r30, 0x4E	; 78
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	28 2f       	mov	r18, r24
    19ae:	2f 7b       	andi	r18, 0xBF	; 191
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	88 2f       	mov	r24, r24
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	00 24       	eor	r0, r0
    19b8:	96 95       	lsr	r25
    19ba:	87 95       	ror	r24
    19bc:	07 94       	ror	r0
    19be:	96 95       	lsr	r25
    19c0:	87 95       	ror	r24
    19c2:	07 94       	ror	r0
    19c4:	98 2f       	mov	r25, r24
    19c6:	80 2d       	mov	r24, r0
    19c8:	82 2b       	or	r24, r18
    19ca:	8c 93       	st	X, r24
}
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    19dc:	e6 e4       	ldi	r30, 0x46	; 70
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	91 81       	ldd	r25, Z+1	; 0x01
}
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    19f2:	ec e4       	ldi	r30, 0x4C	; 76
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	11 82       	std	Z+1, r1	; 0x01
    19f8:	10 82       	st	Z, r1
}
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	08 95       	ret

00001a00 <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void)
{
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
    1a08:	ef e4       	ldi	r30, 0x4F	; 79
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	10 82       	st	Z, r1
	TCCR1B = 0;
    1a0e:	ee e4       	ldi	r30, 0x4E	; 78
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	10 82       	st	Z, r1
	TCNT1 = 0;
    1a14:	ec e4       	ldi	r30, 0x4C	; 76
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	11 82       	std	Z+1, r1	; 0x01
    1a1a:	10 82       	st	Z, r1
	ICR1 = 0;
    1a1c:	e6 e4       	ldi	r30, 0x46	; 70
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	11 82       	std	Z+1, r1	; 0x01
    1a22:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    1a24:	a9 e5       	ldi	r26, 0x59	; 89
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e9 e5       	ldi	r30, 0x59	; 89
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	8f 7d       	andi	r24, 0xDF	; 223
    1a30:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    1a32:	10 92 89 01 	sts	0x0189, r1
    1a36:	10 92 88 01 	sts	0x0188, r1
}
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	2e 97       	sbiw	r28, 0x0e	; 14
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	61 e0       	ldi	r22, 0x01	; 1
    1a58:	41 e0       	ldi	r20, 0x01	; 1
    1a5a:	0e 94 ff 08 	call	0x11fe	; 0x11fe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	62 e0       	ldi	r22, 0x02	; 2
    1a62:	41 e0       	ldi	r20, 0x01	; 1
    1a64:	0e 94 ff 08 	call	0x11fe	; 0x11fe <GPIO_setupPinDirection>
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	a0 ea       	ldi	r26, 0xA0	; 160
    1a6e:	b1 e4       	ldi	r27, 0x41	; 65
    1a70:	8b 87       	std	Y+11, r24	; 0x0b
    1a72:	9c 87       	std	Y+12, r25	; 0x0c
    1a74:	ad 87       	std	Y+13, r26	; 0x0d
    1a76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	4a e7       	ldi	r20, 0x7A	; 122
    1a86:	55 e4       	ldi	r21, 0x45	; 69
    1a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	8f 83       	std	Y+7, r24	; 0x07
    1a92:	98 87       	std	Y+8, r25	; 0x08
    1a94:	a9 87       	std	Y+9, r26	; 0x09
    1a96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a98:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9a:	78 85       	ldd	r23, Y+8	; 0x08
    1a9c:	89 85       	ldd	r24, Y+9	; 0x09
    1a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e8       	ldi	r20, 0x80	; 128
    1aa6:	5f e3       	ldi	r21, 0x3F	; 63
    1aa8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aac:	88 23       	and	r24, r24
    1aae:	2c f4       	brge	.+10     	; 0x1aba <LCD_init+0x7a>
		__ticks = 1;
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	9e 83       	std	Y+6, r25	; 0x06
    1ab6:	8d 83       	std	Y+5, r24	; 0x05
    1ab8:	3f c0       	rjmp	.+126    	; 0x1b38 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1aba:	6f 81       	ldd	r22, Y+7	; 0x07
    1abc:	78 85       	ldd	r23, Y+8	; 0x08
    1abe:	89 85       	ldd	r24, Y+9	; 0x09
    1ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	3f ef       	ldi	r19, 0xFF	; 255
    1ac6:	4f e7       	ldi	r20, 0x7F	; 127
    1ac8:	57 e4       	ldi	r21, 0x47	; 71
    1aca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ace:	18 16       	cp	r1, r24
    1ad0:	4c f5       	brge	.+82     	; 0x1b24 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	40 e2       	ldi	r20, 0x20	; 32
    1ae0:	51 e4       	ldi	r21, 0x41	; 65
    1ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	bc 01       	movw	r22, r24
    1aec:	cd 01       	movw	r24, r26
    1aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	9e 83       	std	Y+6, r25	; 0x06
    1af8:	8d 83       	std	Y+5, r24	; 0x05
    1afa:	0f c0       	rjmp	.+30     	; 0x1b1a <LCD_init+0xda>
    1afc:	80 e9       	ldi	r24, 0x90	; 144
    1afe:	91 e0       	ldi	r25, 0x01	; 1
    1b00:	9c 83       	std	Y+4, r25	; 0x04
    1b02:	8b 83       	std	Y+3, r24	; 0x03
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	9c 81       	ldd	r25, Y+4	; 0x04
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	f1 f7       	brne	.-4      	; 0x1b08 <LCD_init+0xc8>
    1b0c:	9c 83       	std	Y+4, r25	; 0x04
    1b0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b10:	8d 81       	ldd	r24, Y+5	; 0x05
    1b12:	9e 81       	ldd	r25, Y+6	; 0x06
    1b14:	01 97       	sbiw	r24, 0x01	; 1
    1b16:	9e 83       	std	Y+6, r25	; 0x06
    1b18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1e:	00 97       	sbiw	r24, 0x00	; 0
    1b20:	69 f7       	brne	.-38     	; 0x1afc <LCD_init+0xbc>
    1b22:	14 c0       	rjmp	.+40     	; 0x1b4c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b24:	6f 81       	ldd	r22, Y+7	; 0x07
    1b26:	78 85       	ldd	r23, Y+8	; 0x08
    1b28:	89 85       	ldd	r24, Y+9	; 0x09
    1b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	9e 83       	std	Y+6, r25	; 0x06
    1b36:	8d 83       	std	Y+5, r24	; 0x05
    1b38:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3c:	9a 83       	std	Y+2, r25	; 0x02
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	9a 81       	ldd	r25, Y+2	; 0x02
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <LCD_init+0x104>
    1b48:	9a 83       	std	Y+2, r25	; 0x02
    1b4a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	63 e0       	ldi	r22, 0x03	; 3
    1b50:	41 e0       	ldi	r20, 0x01	; 1
    1b52:	0e 94 ff 08 	call	0x11fe	; 0x11fe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	64 e0       	ldi	r22, 0x04	; 4
    1b5a:	41 e0       	ldi	r20, 0x01	; 1
    1b5c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	65 e0       	ldi	r22, 0x05	; 5
    1b64:	41 e0       	ldi	r20, 0x01	; 1
    1b66:	0e 94 ff 08 	call	0x11fe	; 0x11fe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	66 e0       	ldi	r22, 0x06	; 6
    1b6e:	41 e0       	ldi	r20, 0x01	; 1
    1b70:	0e 94 ff 08 	call	0x11fe	; 0x11fe <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1b74:	83 e3       	ldi	r24, 0x33	; 51
    1b76:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1b7a:	82 e3       	ldi	r24, 0x32	; 50
    1b7c:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1b80:	88 e2       	ldi	r24, 0x28	; 40
    1b82:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1b86:	8c e0       	ldi	r24, 0x0C	; 12
    1b88:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <LCD_sendCommand>
}
    1b92:	2e 96       	adiw	r28, 0x0e	; 14
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	08 95       	ret

00001ba4 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1ba4:	0f 93       	push	r16
    1ba6:	1f 93       	push	r17
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	c3 56       	subi	r28, 0x63	; 99
    1bb2:	d0 40       	sbci	r29, 0x00	; 0
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	ed 59       	subi	r30, 0x9D	; 157
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	61 e0       	ldi	r22, 0x01	; 1
    1bca:	40 e0       	ldi	r20, 0x00	; 0
    1bcc:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
    1bd0:	fe 01       	movw	r30, r28
    1bd2:	e1 5a       	subi	r30, 0xA1	; 161
    1bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	a0 e8       	ldi	r26, 0x80	; 128
    1bdc:	bf e3       	ldi	r27, 0x3F	; 63
    1bde:	80 83       	st	Z, r24
    1be0:	91 83       	std	Z+1, r25	; 0x01
    1be2:	a2 83       	std	Z+2, r26	; 0x02
    1be4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be6:	8e 01       	movw	r16, r28
    1be8:	05 5a       	subi	r16, 0xA5	; 165
    1bea:	1f 4f       	sbci	r17, 0xFF	; 255
    1bec:	fe 01       	movw	r30, r28
    1bee:	e1 5a       	subi	r30, 0xA1	; 161
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	60 81       	ld	r22, Z
    1bf4:	71 81       	ldd	r23, Z+1	; 0x01
    1bf6:	82 81       	ldd	r24, Z+2	; 0x02
    1bf8:	93 81       	ldd	r25, Z+3	; 0x03
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	4a e7       	ldi	r20, 0x7A	; 122
    1c00:	55 e4       	ldi	r21, 0x45	; 69
    1c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	f8 01       	movw	r30, r16
    1c0c:	80 83       	st	Z, r24
    1c0e:	91 83       	std	Z+1, r25	; 0x01
    1c10:	a2 83       	std	Z+2, r26	; 0x02
    1c12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c14:	fe 01       	movw	r30, r28
    1c16:	e5 5a       	subi	r30, 0xA5	; 165
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	60 81       	ld	r22, Z
    1c1c:	71 81       	ldd	r23, Z+1	; 0x01
    1c1e:	82 81       	ldd	r24, Z+2	; 0x02
    1c20:	93 81       	ldd	r25, Z+3	; 0x03
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	40 e8       	ldi	r20, 0x80	; 128
    1c28:	5f e3       	ldi	r21, 0x3F	; 63
    1c2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c2e:	88 23       	and	r24, r24
    1c30:	44 f4       	brge	.+16     	; 0x1c42 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1c32:	fe 01       	movw	r30, r28
    1c34:	e7 5a       	subi	r30, 0xA7	; 167
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	91 83       	std	Z+1, r25	; 0x01
    1c3e:	80 83       	st	Z, r24
    1c40:	64 c0       	rjmp	.+200    	; 0x1d0a <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1c42:	fe 01       	movw	r30, r28
    1c44:	e5 5a       	subi	r30, 0xA5	; 165
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	60 81       	ld	r22, Z
    1c4a:	71 81       	ldd	r23, Z+1	; 0x01
    1c4c:	82 81       	ldd	r24, Z+2	; 0x02
    1c4e:	93 81       	ldd	r25, Z+3	; 0x03
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	3f ef       	ldi	r19, 0xFF	; 255
    1c54:	4f e7       	ldi	r20, 0x7F	; 127
    1c56:	57 e4       	ldi	r21, 0x47	; 71
    1c58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c5c:	18 16       	cp	r1, r24
    1c5e:	0c f0       	brlt	.+2      	; 0x1c62 <LCD_sendCommand+0xbe>
    1c60:	43 c0       	rjmp	.+134    	; 0x1ce8 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c62:	fe 01       	movw	r30, r28
    1c64:	e1 5a       	subi	r30, 0xA1	; 161
    1c66:	ff 4f       	sbci	r31, 0xFF	; 255
    1c68:	60 81       	ld	r22, Z
    1c6a:	71 81       	ldd	r23, Z+1	; 0x01
    1c6c:	82 81       	ldd	r24, Z+2	; 0x02
    1c6e:	93 81       	ldd	r25, Z+3	; 0x03
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	40 e2       	ldi	r20, 0x20	; 32
    1c76:	51 e4       	ldi	r21, 0x41	; 65
    1c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	8e 01       	movw	r16, r28
    1c82:	07 5a       	subi	r16, 0xA7	; 167
    1c84:	1f 4f       	sbci	r17, 0xFF	; 255
    1c86:	bc 01       	movw	r22, r24
    1c88:	cd 01       	movw	r24, r26
    1c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	f8 01       	movw	r30, r16
    1c94:	91 83       	std	Z+1, r25	; 0x01
    1c96:	80 83       	st	Z, r24
    1c98:	1f c0       	rjmp	.+62     	; 0x1cd8 <LCD_sendCommand+0x134>
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	e9 5a       	subi	r30, 0xA9	; 169
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	80 e9       	ldi	r24, 0x90	; 144
    1ca2:	91 e0       	ldi	r25, 0x01	; 1
    1ca4:	91 83       	std	Z+1, r25	; 0x01
    1ca6:	80 83       	st	Z, r24
    1ca8:	fe 01       	movw	r30, r28
    1caa:	e9 5a       	subi	r30, 0xA9	; 169
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	80 81       	ld	r24, Z
    1cb0:	91 81       	ldd	r25, Z+1	; 0x01
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <LCD_sendCommand+0x10e>
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	e9 5a       	subi	r30, 0xA9	; 169
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	91 83       	std	Z+1, r25	; 0x01
    1cbe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc0:	de 01       	movw	r26, r28
    1cc2:	a7 5a       	subi	r26, 0xA7	; 167
    1cc4:	bf 4f       	sbci	r27, 0xFF	; 255
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	e7 5a       	subi	r30, 0xA7	; 167
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	80 81       	ld	r24, Z
    1cce:	91 81       	ldd	r25, Z+1	; 0x01
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	11 96       	adiw	r26, 0x01	; 1
    1cd4:	9c 93       	st	X, r25
    1cd6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd8:	fe 01       	movw	r30, r28
    1cda:	e7 5a       	subi	r30, 0xA7	; 167
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	80 81       	ld	r24, Z
    1ce0:	91 81       	ldd	r25, Z+1	; 0x01
    1ce2:	00 97       	sbiw	r24, 0x00	; 0
    1ce4:	d1 f6       	brne	.-76     	; 0x1c9a <LCD_sendCommand+0xf6>
    1ce6:	27 c0       	rjmp	.+78     	; 0x1d36 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce8:	8e 01       	movw	r16, r28
    1cea:	07 5a       	subi	r16, 0xA7	; 167
    1cec:	1f 4f       	sbci	r17, 0xFF	; 255
    1cee:	fe 01       	movw	r30, r28
    1cf0:	e5 5a       	subi	r30, 0xA5	; 165
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	60 81       	ld	r22, Z
    1cf6:	71 81       	ldd	r23, Z+1	; 0x01
    1cf8:	82 81       	ldd	r24, Z+2	; 0x02
    1cfa:	93 81       	ldd	r25, Z+3	; 0x03
    1cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	f8 01       	movw	r30, r16
    1d06:	91 83       	std	Z+1, r25	; 0x01
    1d08:	80 83       	st	Z, r24
    1d0a:	de 01       	movw	r26, r28
    1d0c:	ab 5a       	subi	r26, 0xAB	; 171
    1d0e:	bf 4f       	sbci	r27, 0xFF	; 255
    1d10:	fe 01       	movw	r30, r28
    1d12:	e7 5a       	subi	r30, 0xA7	; 167
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	80 81       	ld	r24, Z
    1d18:	91 81       	ldd	r25, Z+1	; 0x01
    1d1a:	8d 93       	st	X+, r24
    1d1c:	9c 93       	st	X, r25
    1d1e:	fe 01       	movw	r30, r28
    1d20:	eb 5a       	subi	r30, 0xAB	; 171
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	80 81       	ld	r24, Z
    1d26:	91 81       	ldd	r25, Z+1	; 0x01
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	f1 f7       	brne	.-4      	; 0x1d28 <LCD_sendCommand+0x184>
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	eb 5a       	subi	r30, 0xAB	; 171
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	91 83       	std	Z+1, r25	; 0x01
    1d34:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	62 e0       	ldi	r22, 0x02	; 2
    1d3a:	41 e0       	ldi	r20, 0x01	; 1
    1d3c:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
    1d40:	fe 01       	movw	r30, r28
    1d42:	ef 5a       	subi	r30, 0xAF	; 175
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	a0 e8       	ldi	r26, 0x80	; 128
    1d4c:	bf e3       	ldi	r27, 0x3F	; 63
    1d4e:	80 83       	st	Z, r24
    1d50:	91 83       	std	Z+1, r25	; 0x01
    1d52:	a2 83       	std	Z+2, r26	; 0x02
    1d54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d56:	8e 01       	movw	r16, r28
    1d58:	03 5b       	subi	r16, 0xB3	; 179
    1d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	ef 5a       	subi	r30, 0xAF	; 175
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	60 81       	ld	r22, Z
    1d64:	71 81       	ldd	r23, Z+1	; 0x01
    1d66:	82 81       	ldd	r24, Z+2	; 0x02
    1d68:	93 81       	ldd	r25, Z+3	; 0x03
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	4a e7       	ldi	r20, 0x7A	; 122
    1d70:	55 e4       	ldi	r21, 0x45	; 69
    1d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	f8 01       	movw	r30, r16
    1d7c:	80 83       	st	Z, r24
    1d7e:	91 83       	std	Z+1, r25	; 0x01
    1d80:	a2 83       	std	Z+2, r26	; 0x02
    1d82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d84:	fe 01       	movw	r30, r28
    1d86:	e3 5b       	subi	r30, 0xB3	; 179
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	60 81       	ld	r22, Z
    1d8c:	71 81       	ldd	r23, Z+1	; 0x01
    1d8e:	82 81       	ldd	r24, Z+2	; 0x02
    1d90:	93 81       	ldd	r25, Z+3	; 0x03
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e8       	ldi	r20, 0x80	; 128
    1d98:	5f e3       	ldi	r21, 0x3F	; 63
    1d9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d9e:	88 23       	and	r24, r24
    1da0:	44 f4       	brge	.+16     	; 0x1db2 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1da2:	fe 01       	movw	r30, r28
    1da4:	e5 5b       	subi	r30, 0xB5	; 181
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	91 83       	std	Z+1, r25	; 0x01
    1dae:	80 83       	st	Z, r24
    1db0:	64 c0       	rjmp	.+200    	; 0x1e7a <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1db2:	fe 01       	movw	r30, r28
    1db4:	e3 5b       	subi	r30, 0xB3	; 179
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	3f ef       	ldi	r19, 0xFF	; 255
    1dc4:	4f e7       	ldi	r20, 0x7F	; 127
    1dc6:	57 e4       	ldi	r21, 0x47	; 71
    1dc8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dcc:	18 16       	cp	r1, r24
    1dce:	0c f0       	brlt	.+2      	; 0x1dd2 <LCD_sendCommand+0x22e>
    1dd0:	43 c0       	rjmp	.+134    	; 0x1e58 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	ef 5a       	subi	r30, 0xAF	; 175
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	60 81       	ld	r22, Z
    1dda:	71 81       	ldd	r23, Z+1	; 0x01
    1ddc:	82 81       	ldd	r24, Z+2	; 0x02
    1dde:	93 81       	ldd	r25, Z+3	; 0x03
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 e2       	ldi	r20, 0x20	; 32
    1de6:	51 e4       	ldi	r21, 0x41	; 65
    1de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	8e 01       	movw	r16, r28
    1df2:	05 5b       	subi	r16, 0xB5	; 181
    1df4:	1f 4f       	sbci	r17, 0xFF	; 255
    1df6:	bc 01       	movw	r22, r24
    1df8:	cd 01       	movw	r24, r26
    1dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	f8 01       	movw	r30, r16
    1e04:	91 83       	std	Z+1, r25	; 0x01
    1e06:	80 83       	st	Z, r24
    1e08:	1f c0       	rjmp	.+62     	; 0x1e48 <LCD_sendCommand+0x2a4>
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	e7 5b       	subi	r30, 0xB7	; 183
    1e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e10:	80 e9       	ldi	r24, 0x90	; 144
    1e12:	91 e0       	ldi	r25, 0x01	; 1
    1e14:	91 83       	std	Z+1, r25	; 0x01
    1e16:	80 83       	st	Z, r24
    1e18:	fe 01       	movw	r30, r28
    1e1a:	e7 5b       	subi	r30, 0xB7	; 183
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	80 81       	ld	r24, Z
    1e20:	91 81       	ldd	r25, Z+1	; 0x01
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <LCD_sendCommand+0x27e>
    1e26:	fe 01       	movw	r30, r28
    1e28:	e7 5b       	subi	r30, 0xB7	; 183
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	91 83       	std	Z+1, r25	; 0x01
    1e2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e30:	de 01       	movw	r26, r28
    1e32:	a5 5b       	subi	r26, 0xB5	; 181
    1e34:	bf 4f       	sbci	r27, 0xFF	; 255
    1e36:	fe 01       	movw	r30, r28
    1e38:	e5 5b       	subi	r30, 0xB5	; 181
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	80 81       	ld	r24, Z
    1e3e:	91 81       	ldd	r25, Z+1	; 0x01
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	11 96       	adiw	r26, 0x01	; 1
    1e44:	9c 93       	st	X, r25
    1e46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e48:	fe 01       	movw	r30, r28
    1e4a:	e5 5b       	subi	r30, 0xB5	; 181
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	80 81       	ld	r24, Z
    1e50:	91 81       	ldd	r25, Z+1	; 0x01
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	d1 f6       	brne	.-76     	; 0x1e0a <LCD_sendCommand+0x266>
    1e56:	27 c0       	rjmp	.+78     	; 0x1ea6 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e58:	8e 01       	movw	r16, r28
    1e5a:	05 5b       	subi	r16, 0xB5	; 181
    1e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5e:	fe 01       	movw	r30, r28
    1e60:	e3 5b       	subi	r30, 0xB3	; 179
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	60 81       	ld	r22, Z
    1e66:	71 81       	ldd	r23, Z+1	; 0x01
    1e68:	82 81       	ldd	r24, Z+2	; 0x02
    1e6a:	93 81       	ldd	r25, Z+3	; 0x03
    1e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	f8 01       	movw	r30, r16
    1e76:	91 83       	std	Z+1, r25	; 0x01
    1e78:	80 83       	st	Z, r24
    1e7a:	de 01       	movw	r26, r28
    1e7c:	a9 5b       	subi	r26, 0xB9	; 185
    1e7e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e80:	fe 01       	movw	r30, r28
    1e82:	e5 5b       	subi	r30, 0xB5	; 181
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	80 81       	ld	r24, Z
    1e88:	91 81       	ldd	r25, Z+1	; 0x01
    1e8a:	8d 93       	st	X+, r24
    1e8c:	9c 93       	st	X, r25
    1e8e:	fe 01       	movw	r30, r28
    1e90:	e9 5b       	subi	r30, 0xB9	; 185
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	80 81       	ld	r24, Z
    1e96:	91 81       	ldd	r25, Z+1	; 0x01
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	f1 f7       	brne	.-4      	; 0x1e98 <LCD_sendCommand+0x2f4>
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	e9 5b       	subi	r30, 0xB9	; 185
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	91 83       	std	Z+1, r25	; 0x01
    1ea4:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1ea6:	fe 01       	movw	r30, r28
    1ea8:	ed 59       	subi	r30, 0x9D	; 157
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	80 81       	ld	r24, Z
    1eae:	88 2f       	mov	r24, r24
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	80 71       	andi	r24, 0x10	; 16
    1eb4:	90 70       	andi	r25, 0x00	; 0
    1eb6:	95 95       	asr	r25
    1eb8:	87 95       	ror	r24
    1eba:	95 95       	asr	r25
    1ebc:	87 95       	ror	r24
    1ebe:	95 95       	asr	r25
    1ec0:	87 95       	ror	r24
    1ec2:	95 95       	asr	r25
    1ec4:	87 95       	ror	r24
    1ec6:	98 2f       	mov	r25, r24
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	63 e0       	ldi	r22, 0x03	; 3
    1ecc:	49 2f       	mov	r20, r25
    1ece:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	ed 59       	subi	r30, 0x9D	; 157
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	80 81       	ld	r24, Z
    1eda:	88 2f       	mov	r24, r24
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	80 72       	andi	r24, 0x20	; 32
    1ee0:	90 70       	andi	r25, 0x00	; 0
    1ee2:	95 95       	asr	r25
    1ee4:	87 95       	ror	r24
    1ee6:	95 95       	asr	r25
    1ee8:	87 95       	ror	r24
    1eea:	95 95       	asr	r25
    1eec:	87 95       	ror	r24
    1eee:	95 95       	asr	r25
    1ef0:	87 95       	ror	r24
    1ef2:	95 95       	asr	r25
    1ef4:	87 95       	ror	r24
    1ef6:	98 2f       	mov	r25, r24
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	64 e0       	ldi	r22, 0x04	; 4
    1efc:	49 2f       	mov	r20, r25
    1efe:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1f02:	fe 01       	movw	r30, r28
    1f04:	ed 59       	subi	r30, 0x9D	; 157
    1f06:	ff 4f       	sbci	r31, 0xFF	; 255
    1f08:	80 81       	ld	r24, Z
    1f0a:	88 2f       	mov	r24, r24
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	80 74       	andi	r24, 0x40	; 64
    1f10:	90 70       	andi	r25, 0x00	; 0
    1f12:	08 2e       	mov	r0, r24
    1f14:	89 2f       	mov	r24, r25
    1f16:	00 0c       	add	r0, r0
    1f18:	88 1f       	adc	r24, r24
    1f1a:	99 0b       	sbc	r25, r25
    1f1c:	00 0c       	add	r0, r0
    1f1e:	88 1f       	adc	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	98 2f       	mov	r25, r24
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	65 e0       	ldi	r22, 0x05	; 5
    1f28:	49 2f       	mov	r20, r25
    1f2a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1f2e:	fe 01       	movw	r30, r28
    1f30:	ed 59       	subi	r30, 0x9D	; 157
    1f32:	ff 4f       	sbci	r31, 0xFF	; 255
    1f34:	80 81       	ld	r24, Z
    1f36:	98 2f       	mov	r25, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	99 27       	eor	r25, r25
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	66 e0       	ldi	r22, 0x06	; 6
    1f42:	49 2f       	mov	r20, r25
    1f44:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
    1f48:	fe 01       	movw	r30, r28
    1f4a:	ed 5b       	subi	r30, 0xBD	; 189
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	a0 e8       	ldi	r26, 0x80	; 128
    1f54:	bf e3       	ldi	r27, 0x3F	; 63
    1f56:	80 83       	st	Z, r24
    1f58:	91 83       	std	Z+1, r25	; 0x01
    1f5a:	a2 83       	std	Z+2, r26	; 0x02
    1f5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5e:	8e 01       	movw	r16, r28
    1f60:	01 5c       	subi	r16, 0xC1	; 193
    1f62:	1f 4f       	sbci	r17, 0xFF	; 255
    1f64:	fe 01       	movw	r30, r28
    1f66:	ed 5b       	subi	r30, 0xBD	; 189
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	60 81       	ld	r22, Z
    1f6c:	71 81       	ldd	r23, Z+1	; 0x01
    1f6e:	82 81       	ldd	r24, Z+2	; 0x02
    1f70:	93 81       	ldd	r25, Z+3	; 0x03
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	4a e7       	ldi	r20, 0x7A	; 122
    1f78:	55 e4       	ldi	r21, 0x45	; 69
    1f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	f8 01       	movw	r30, r16
    1f84:	80 83       	st	Z, r24
    1f86:	91 83       	std	Z+1, r25	; 0x01
    1f88:	a2 83       	std	Z+2, r26	; 0x02
    1f8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	ff 96       	adiw	r30, 0x3f	; 63
    1f90:	60 81       	ld	r22, Z
    1f92:	71 81       	ldd	r23, Z+1	; 0x01
    1f94:	82 81       	ldd	r24, Z+2	; 0x02
    1f96:	93 81       	ldd	r25, Z+3	; 0x03
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e8       	ldi	r20, 0x80	; 128
    1f9e:	5f e3       	ldi	r21, 0x3F	; 63
    1fa0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fa4:	88 23       	and	r24, r24
    1fa6:	2c f4       	brge	.+10     	; 0x1fb2 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	9e af       	std	Y+62, r25	; 0x3e
    1fae:	8d af       	std	Y+61, r24	; 0x3d
    1fb0:	46 c0       	rjmp	.+140    	; 0x203e <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	ff 96       	adiw	r30, 0x3f	; 63
    1fb6:	60 81       	ld	r22, Z
    1fb8:	71 81       	ldd	r23, Z+1	; 0x01
    1fba:	82 81       	ldd	r24, Z+2	; 0x02
    1fbc:	93 81       	ldd	r25, Z+3	; 0x03
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	3f ef       	ldi	r19, 0xFF	; 255
    1fc2:	4f e7       	ldi	r20, 0x7F	; 127
    1fc4:	57 e4       	ldi	r21, 0x47	; 71
    1fc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fca:	18 16       	cp	r1, r24
    1fcc:	64 f5       	brge	.+88     	; 0x2026 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fce:	fe 01       	movw	r30, r28
    1fd0:	ed 5b       	subi	r30, 0xBD	; 189
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	60 81       	ld	r22, Z
    1fd6:	71 81       	ldd	r23, Z+1	; 0x01
    1fd8:	82 81       	ldd	r24, Z+2	; 0x02
    1fda:	93 81       	ldd	r25, Z+3	; 0x03
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e2       	ldi	r20, 0x20	; 32
    1fe2:	51 e4       	ldi	r21, 0x41	; 65
    1fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	bc 01       	movw	r22, r24
    1fee:	cd 01       	movw	r24, r26
    1ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	9e af       	std	Y+62, r25	; 0x3e
    1ffa:	8d af       	std	Y+61, r24	; 0x3d
    1ffc:	0f c0       	rjmp	.+30     	; 0x201c <LCD_sendCommand+0x478>
    1ffe:	80 e9       	ldi	r24, 0x90	; 144
    2000:	91 e0       	ldi	r25, 0x01	; 1
    2002:	9c af       	std	Y+60, r25	; 0x3c
    2004:	8b af       	std	Y+59, r24	; 0x3b
    2006:	8b ad       	ldd	r24, Y+59	; 0x3b
    2008:	9c ad       	ldd	r25, Y+60	; 0x3c
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <LCD_sendCommand+0x466>
    200e:	9c af       	std	Y+60, r25	; 0x3c
    2010:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2012:	8d ad       	ldd	r24, Y+61	; 0x3d
    2014:	9e ad       	ldd	r25, Y+62	; 0x3e
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	9e af       	std	Y+62, r25	; 0x3e
    201a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201c:	8d ad       	ldd	r24, Y+61	; 0x3d
    201e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	69 f7       	brne	.-38     	; 0x1ffe <LCD_sendCommand+0x45a>
    2024:	16 c0       	rjmp	.+44     	; 0x2052 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2026:	fe 01       	movw	r30, r28
    2028:	ff 96       	adiw	r30, 0x3f	; 63
    202a:	60 81       	ld	r22, Z
    202c:	71 81       	ldd	r23, Z+1	; 0x01
    202e:	82 81       	ldd	r24, Z+2	; 0x02
    2030:	93 81       	ldd	r25, Z+3	; 0x03
    2032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	9e af       	std	Y+62, r25	; 0x3e
    203c:	8d af       	std	Y+61, r24	; 0x3d
    203e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2040:	9e ad       	ldd	r25, Y+62	; 0x3e
    2042:	9a af       	std	Y+58, r25	; 0x3a
    2044:	89 af       	std	Y+57, r24	; 0x39
    2046:	89 ad       	ldd	r24, Y+57	; 0x39
    2048:	9a ad       	ldd	r25, Y+58	; 0x3a
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	f1 f7       	brne	.-4      	; 0x204a <LCD_sendCommand+0x4a6>
    204e:	9a af       	std	Y+58, r25	; 0x3a
    2050:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	62 e0       	ldi	r22, 0x02	; 2
    2056:	40 e0       	ldi	r20, 0x00	; 0
    2058:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	a0 e8       	ldi	r26, 0x80	; 128
    2062:	bf e3       	ldi	r27, 0x3F	; 63
    2064:	8d ab       	std	Y+53, r24	; 0x35
    2066:	9e ab       	std	Y+54, r25	; 0x36
    2068:	af ab       	std	Y+55, r26	; 0x37
    206a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206c:	6d a9       	ldd	r22, Y+53	; 0x35
    206e:	7e a9       	ldd	r23, Y+54	; 0x36
    2070:	8f a9       	ldd	r24, Y+55	; 0x37
    2072:	98 ad       	ldd	r25, Y+56	; 0x38
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	4a e7       	ldi	r20, 0x7A	; 122
    207a:	55 e4       	ldi	r21, 0x45	; 69
    207c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	89 ab       	std	Y+49, r24	; 0x31
    2086:	9a ab       	std	Y+50, r25	; 0x32
    2088:	ab ab       	std	Y+51, r26	; 0x33
    208a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    208c:	69 a9       	ldd	r22, Y+49	; 0x31
    208e:	7a a9       	ldd	r23, Y+50	; 0x32
    2090:	8b a9       	ldd	r24, Y+51	; 0x33
    2092:	9c a9       	ldd	r25, Y+52	; 0x34
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 e8       	ldi	r20, 0x80	; 128
    209a:	5f e3       	ldi	r21, 0x3F	; 63
    209c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20a0:	88 23       	and	r24, r24
    20a2:	2c f4       	brge	.+10     	; 0x20ae <LCD_sendCommand+0x50a>
		__ticks = 1;
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	98 ab       	std	Y+48, r25	; 0x30
    20aa:	8f a7       	std	Y+47, r24	; 0x2f
    20ac:	3f c0       	rjmp	.+126    	; 0x212c <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    20ae:	69 a9       	ldd	r22, Y+49	; 0x31
    20b0:	7a a9       	ldd	r23, Y+50	; 0x32
    20b2:	8b a9       	ldd	r24, Y+51	; 0x33
    20b4:	9c a9       	ldd	r25, Y+52	; 0x34
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	3f ef       	ldi	r19, 0xFF	; 255
    20ba:	4f e7       	ldi	r20, 0x7F	; 127
    20bc:	57 e4       	ldi	r21, 0x47	; 71
    20be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20c2:	18 16       	cp	r1, r24
    20c4:	4c f5       	brge	.+82     	; 0x2118 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c6:	6d a9       	ldd	r22, Y+53	; 0x35
    20c8:	7e a9       	ldd	r23, Y+54	; 0x36
    20ca:	8f a9       	ldd	r24, Y+55	; 0x37
    20cc:	98 ad       	ldd	r25, Y+56	; 0x38
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e2       	ldi	r20, 0x20	; 32
    20d4:	51 e4       	ldi	r21, 0x41	; 65
    20d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	bc 01       	movw	r22, r24
    20e0:	cd 01       	movw	r24, r26
    20e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	98 ab       	std	Y+48, r25	; 0x30
    20ec:	8f a7       	std	Y+47, r24	; 0x2f
    20ee:	0f c0       	rjmp	.+30     	; 0x210e <LCD_sendCommand+0x56a>
    20f0:	80 e9       	ldi	r24, 0x90	; 144
    20f2:	91 e0       	ldi	r25, 0x01	; 1
    20f4:	9e a7       	std	Y+46, r25	; 0x2e
    20f6:	8d a7       	std	Y+45, r24	; 0x2d
    20f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    20fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	f1 f7       	brne	.-4      	; 0x20fc <LCD_sendCommand+0x558>
    2100:	9e a7       	std	Y+46, r25	; 0x2e
    2102:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2104:	8f a5       	ldd	r24, Y+47	; 0x2f
    2106:	98 a9       	ldd	r25, Y+48	; 0x30
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	98 ab       	std	Y+48, r25	; 0x30
    210c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2110:	98 a9       	ldd	r25, Y+48	; 0x30
    2112:	00 97       	sbiw	r24, 0x00	; 0
    2114:	69 f7       	brne	.-38     	; 0x20f0 <LCD_sendCommand+0x54c>
    2116:	14 c0       	rjmp	.+40     	; 0x2140 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2118:	69 a9       	ldd	r22, Y+49	; 0x31
    211a:	7a a9       	ldd	r23, Y+50	; 0x32
    211c:	8b a9       	ldd	r24, Y+51	; 0x33
    211e:	9c a9       	ldd	r25, Y+52	; 0x34
    2120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	98 ab       	std	Y+48, r25	; 0x30
    212a:	8f a7       	std	Y+47, r24	; 0x2f
    212c:	8f a5       	ldd	r24, Y+47	; 0x2f
    212e:	98 a9       	ldd	r25, Y+48	; 0x30
    2130:	9c a7       	std	Y+44, r25	; 0x2c
    2132:	8b a7       	std	Y+43, r24	; 0x2b
    2134:	8b a5       	ldd	r24, Y+43	; 0x2b
    2136:	9c a5       	ldd	r25, Y+44	; 0x2c
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	f1 f7       	brne	.-4      	; 0x2138 <LCD_sendCommand+0x594>
    213c:	9c a7       	std	Y+44, r25	; 0x2c
    213e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	62 e0       	ldi	r22, 0x02	; 2
    2144:	41 e0       	ldi	r20, 0x01	; 1
    2146:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	a0 e8       	ldi	r26, 0x80	; 128
    2150:	bf e3       	ldi	r27, 0x3F	; 63
    2152:	8f a3       	std	Y+39, r24	; 0x27
    2154:	98 a7       	std	Y+40, r25	; 0x28
    2156:	a9 a7       	std	Y+41, r26	; 0x29
    2158:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215a:	6f a1       	ldd	r22, Y+39	; 0x27
    215c:	78 a5       	ldd	r23, Y+40	; 0x28
    215e:	89 a5       	ldd	r24, Y+41	; 0x29
    2160:	9a a5       	ldd	r25, Y+42	; 0x2a
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	4a e7       	ldi	r20, 0x7A	; 122
    2168:	55 e4       	ldi	r21, 0x45	; 69
    216a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	8b a3       	std	Y+35, r24	; 0x23
    2174:	9c a3       	std	Y+36, r25	; 0x24
    2176:	ad a3       	std	Y+37, r26	; 0x25
    2178:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    217a:	6b a1       	ldd	r22, Y+35	; 0x23
    217c:	7c a1       	ldd	r23, Y+36	; 0x24
    217e:	8d a1       	ldd	r24, Y+37	; 0x25
    2180:	9e a1       	ldd	r25, Y+38	; 0x26
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e8       	ldi	r20, 0x80	; 128
    2188:	5f e3       	ldi	r21, 0x3F	; 63
    218a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    218e:	88 23       	and	r24, r24
    2190:	2c f4       	brge	.+10     	; 0x219c <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	9a a3       	std	Y+34, r25	; 0x22
    2198:	89 a3       	std	Y+33, r24	; 0x21
    219a:	3f c0       	rjmp	.+126    	; 0x221a <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    219c:	6b a1       	ldd	r22, Y+35	; 0x23
    219e:	7c a1       	ldd	r23, Y+36	; 0x24
    21a0:	8d a1       	ldd	r24, Y+37	; 0x25
    21a2:	9e a1       	ldd	r25, Y+38	; 0x26
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	3f ef       	ldi	r19, 0xFF	; 255
    21a8:	4f e7       	ldi	r20, 0x7F	; 127
    21aa:	57 e4       	ldi	r21, 0x47	; 71
    21ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21b0:	18 16       	cp	r1, r24
    21b2:	4c f5       	brge	.+82     	; 0x2206 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b4:	6f a1       	ldd	r22, Y+39	; 0x27
    21b6:	78 a5       	ldd	r23, Y+40	; 0x28
    21b8:	89 a5       	ldd	r24, Y+41	; 0x29
    21ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e2       	ldi	r20, 0x20	; 32
    21c2:	51 e4       	ldi	r21, 0x41	; 65
    21c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	bc 01       	movw	r22, r24
    21ce:	cd 01       	movw	r24, r26
    21d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	9a a3       	std	Y+34, r25	; 0x22
    21da:	89 a3       	std	Y+33, r24	; 0x21
    21dc:	0f c0       	rjmp	.+30     	; 0x21fc <LCD_sendCommand+0x658>
    21de:	80 e9       	ldi	r24, 0x90	; 144
    21e0:	91 e0       	ldi	r25, 0x01	; 1
    21e2:	98 a3       	std	Y+32, r25	; 0x20
    21e4:	8f 8f       	std	Y+31, r24	; 0x1f
    21e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21e8:	98 a1       	ldd	r25, Y+32	; 0x20
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	f1 f7       	brne	.-4      	; 0x21ea <LCD_sendCommand+0x646>
    21ee:	98 a3       	std	Y+32, r25	; 0x20
    21f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f2:	89 a1       	ldd	r24, Y+33	; 0x21
    21f4:	9a a1       	ldd	r25, Y+34	; 0x22
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	9a a3       	std	Y+34, r25	; 0x22
    21fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fc:	89 a1       	ldd	r24, Y+33	; 0x21
    21fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2200:	00 97       	sbiw	r24, 0x00	; 0
    2202:	69 f7       	brne	.-38     	; 0x21de <LCD_sendCommand+0x63a>
    2204:	14 c0       	rjmp	.+40     	; 0x222e <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2206:	6b a1       	ldd	r22, Y+35	; 0x23
    2208:	7c a1       	ldd	r23, Y+36	; 0x24
    220a:	8d a1       	ldd	r24, Y+37	; 0x25
    220c:	9e a1       	ldd	r25, Y+38	; 0x26
    220e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	9a a3       	std	Y+34, r25	; 0x22
    2218:	89 a3       	std	Y+33, r24	; 0x21
    221a:	89 a1       	ldd	r24, Y+33	; 0x21
    221c:	9a a1       	ldd	r25, Y+34	; 0x22
    221e:	9e 8f       	std	Y+30, r25	; 0x1e
    2220:	8d 8f       	std	Y+29, r24	; 0x1d
    2222:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2224:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	f1 f7       	brne	.-4      	; 0x2226 <LCD_sendCommand+0x682>
    222a:	9e 8f       	std	Y+30, r25	; 0x1e
    222c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    222e:	fe 01       	movw	r30, r28
    2230:	ed 59       	subi	r30, 0x9D	; 157
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	80 81       	ld	r24, Z
    2236:	98 2f       	mov	r25, r24
    2238:	91 70       	andi	r25, 0x01	; 1
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	63 e0       	ldi	r22, 0x03	; 3
    223e:	49 2f       	mov	r20, r25
    2240:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2244:	fe 01       	movw	r30, r28
    2246:	ed 59       	subi	r30, 0x9D	; 157
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	80 81       	ld	r24, Z
    224c:	88 2f       	mov	r24, r24
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	82 70       	andi	r24, 0x02	; 2
    2252:	90 70       	andi	r25, 0x00	; 0
    2254:	95 95       	asr	r25
    2256:	87 95       	ror	r24
    2258:	98 2f       	mov	r25, r24
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	64 e0       	ldi	r22, 0x04	; 4
    225e:	49 2f       	mov	r20, r25
    2260:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2264:	fe 01       	movw	r30, r28
    2266:	ed 59       	subi	r30, 0x9D	; 157
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	80 81       	ld	r24, Z
    226c:	88 2f       	mov	r24, r24
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	84 70       	andi	r24, 0x04	; 4
    2272:	90 70       	andi	r25, 0x00	; 0
    2274:	95 95       	asr	r25
    2276:	87 95       	ror	r24
    2278:	95 95       	asr	r25
    227a:	87 95       	ror	r24
    227c:	98 2f       	mov	r25, r24
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	65 e0       	ldi	r22, 0x05	; 5
    2282:	49 2f       	mov	r20, r25
    2284:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2288:	fe 01       	movw	r30, r28
    228a:	ed 59       	subi	r30, 0x9D	; 157
    228c:	ff 4f       	sbci	r31, 0xFF	; 255
    228e:	80 81       	ld	r24, Z
    2290:	88 2f       	mov	r24, r24
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	88 70       	andi	r24, 0x08	; 8
    2296:	90 70       	andi	r25, 0x00	; 0
    2298:	95 95       	asr	r25
    229a:	87 95       	ror	r24
    229c:	95 95       	asr	r25
    229e:	87 95       	ror	r24
    22a0:	95 95       	asr	r25
    22a2:	87 95       	ror	r24
    22a4:	98 2f       	mov	r25, r24
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	66 e0       	ldi	r22, 0x06	; 6
    22aa:	49 2f       	mov	r20, r25
    22ac:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	a0 e8       	ldi	r26, 0x80	; 128
    22b6:	bf e3       	ldi	r27, 0x3F	; 63
    22b8:	89 8f       	std	Y+25, r24	; 0x19
    22ba:	9a 8f       	std	Y+26, r25	; 0x1a
    22bc:	ab 8f       	std	Y+27, r26	; 0x1b
    22be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c0:	69 8d       	ldd	r22, Y+25	; 0x19
    22c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	4a e7       	ldi	r20, 0x7A	; 122
    22ce:	55 e4       	ldi	r21, 0x45	; 69
    22d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	8d 8b       	std	Y+21, r24	; 0x15
    22da:	9e 8b       	std	Y+22, r25	; 0x16
    22dc:	af 8b       	std	Y+23, r26	; 0x17
    22de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22e0:	6d 89       	ldd	r22, Y+21	; 0x15
    22e2:	7e 89       	ldd	r23, Y+22	; 0x16
    22e4:	8f 89       	ldd	r24, Y+23	; 0x17
    22e6:	98 8d       	ldd	r25, Y+24	; 0x18
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e8       	ldi	r20, 0x80	; 128
    22ee:	5f e3       	ldi	r21, 0x3F	; 63
    22f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22f4:	88 23       	and	r24, r24
    22f6:	2c f4       	brge	.+10     	; 0x2302 <LCD_sendCommand+0x75e>
		__ticks = 1;
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	9c 8b       	std	Y+20, r25	; 0x14
    22fe:	8b 8b       	std	Y+19, r24	; 0x13
    2300:	3f c0       	rjmp	.+126    	; 0x2380 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2302:	6d 89       	ldd	r22, Y+21	; 0x15
    2304:	7e 89       	ldd	r23, Y+22	; 0x16
    2306:	8f 89       	ldd	r24, Y+23	; 0x17
    2308:	98 8d       	ldd	r25, Y+24	; 0x18
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	3f ef       	ldi	r19, 0xFF	; 255
    230e:	4f e7       	ldi	r20, 0x7F	; 127
    2310:	57 e4       	ldi	r21, 0x47	; 71
    2312:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2316:	18 16       	cp	r1, r24
    2318:	4c f5       	brge	.+82     	; 0x236c <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231a:	69 8d       	ldd	r22, Y+25	; 0x19
    231c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    231e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2320:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e2       	ldi	r20, 0x20	; 32
    2328:	51 e4       	ldi	r21, 0x41	; 65
    232a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	bc 01       	movw	r22, r24
    2334:	cd 01       	movw	r24, r26
    2336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	9c 8b       	std	Y+20, r25	; 0x14
    2340:	8b 8b       	std	Y+19, r24	; 0x13
    2342:	0f c0       	rjmp	.+30     	; 0x2362 <LCD_sendCommand+0x7be>
    2344:	80 e9       	ldi	r24, 0x90	; 144
    2346:	91 e0       	ldi	r25, 0x01	; 1
    2348:	9a 8b       	std	Y+18, r25	; 0x12
    234a:	89 8b       	std	Y+17, r24	; 0x11
    234c:	89 89       	ldd	r24, Y+17	; 0x11
    234e:	9a 89       	ldd	r25, Y+18	; 0x12
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <LCD_sendCommand+0x7ac>
    2354:	9a 8b       	std	Y+18, r25	; 0x12
    2356:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2358:	8b 89       	ldd	r24, Y+19	; 0x13
    235a:	9c 89       	ldd	r25, Y+20	; 0x14
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	9c 8b       	std	Y+20, r25	; 0x14
    2360:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2362:	8b 89       	ldd	r24, Y+19	; 0x13
    2364:	9c 89       	ldd	r25, Y+20	; 0x14
    2366:	00 97       	sbiw	r24, 0x00	; 0
    2368:	69 f7       	brne	.-38     	; 0x2344 <LCD_sendCommand+0x7a0>
    236a:	14 c0       	rjmp	.+40     	; 0x2394 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236c:	6d 89       	ldd	r22, Y+21	; 0x15
    236e:	7e 89       	ldd	r23, Y+22	; 0x16
    2370:	8f 89       	ldd	r24, Y+23	; 0x17
    2372:	98 8d       	ldd	r25, Y+24	; 0x18
    2374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	9c 8b       	std	Y+20, r25	; 0x14
    237e:	8b 8b       	std	Y+19, r24	; 0x13
    2380:	8b 89       	ldd	r24, Y+19	; 0x13
    2382:	9c 89       	ldd	r25, Y+20	; 0x14
    2384:	98 8b       	std	Y+16, r25	; 0x10
    2386:	8f 87       	std	Y+15, r24	; 0x0f
    2388:	8f 85       	ldd	r24, Y+15	; 0x0f
    238a:	98 89       	ldd	r25, Y+16	; 0x10
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <LCD_sendCommand+0x7e8>
    2390:	98 8b       	std	Y+16, r25	; 0x10
    2392:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	62 e0       	ldi	r22, 0x02	; 2
    2398:	40 e0       	ldi	r20, 0x00	; 0
    239a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	a0 e8       	ldi	r26, 0x80	; 128
    23a4:	bf e3       	ldi	r27, 0x3F	; 63
    23a6:	8b 87       	std	Y+11, r24	; 0x0b
    23a8:	9c 87       	std	Y+12, r25	; 0x0c
    23aa:	ad 87       	std	Y+13, r26	; 0x0d
    23ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    23b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	4a e7       	ldi	r20, 0x7A	; 122
    23bc:	55 e4       	ldi	r21, 0x45	; 69
    23be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	8f 83       	std	Y+7, r24	; 0x07
    23c8:	98 87       	std	Y+8, r25	; 0x08
    23ca:	a9 87       	std	Y+9, r26	; 0x09
    23cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23ce:	6f 81       	ldd	r22, Y+7	; 0x07
    23d0:	78 85       	ldd	r23, Y+8	; 0x08
    23d2:	89 85       	ldd	r24, Y+9	; 0x09
    23d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	40 e8       	ldi	r20, 0x80	; 128
    23dc:	5f e3       	ldi	r21, 0x3F	; 63
    23de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23e2:	88 23       	and	r24, r24
    23e4:	2c f4       	brge	.+10     	; 0x23f0 <LCD_sendCommand+0x84c>
		__ticks = 1;
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	9e 83       	std	Y+6, r25	; 0x06
    23ec:	8d 83       	std	Y+5, r24	; 0x05
    23ee:	3f c0       	rjmp	.+126    	; 0x246e <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    23f0:	6f 81       	ldd	r22, Y+7	; 0x07
    23f2:	78 85       	ldd	r23, Y+8	; 0x08
    23f4:	89 85       	ldd	r24, Y+9	; 0x09
    23f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	3f ef       	ldi	r19, 0xFF	; 255
    23fc:	4f e7       	ldi	r20, 0x7F	; 127
    23fe:	57 e4       	ldi	r21, 0x47	; 71
    2400:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2404:	18 16       	cp	r1, r24
    2406:	4c f5       	brge	.+82     	; 0x245a <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2408:	6b 85       	ldd	r22, Y+11	; 0x0b
    240a:	7c 85       	ldd	r23, Y+12	; 0x0c
    240c:	8d 85       	ldd	r24, Y+13	; 0x0d
    240e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	40 e2       	ldi	r20, 0x20	; 32
    2416:	51 e4       	ldi	r21, 0x41	; 65
    2418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	bc 01       	movw	r22, r24
    2422:	cd 01       	movw	r24, r26
    2424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	9e 83       	std	Y+6, r25	; 0x06
    242e:	8d 83       	std	Y+5, r24	; 0x05
    2430:	0f c0       	rjmp	.+30     	; 0x2450 <LCD_sendCommand+0x8ac>
    2432:	80 e9       	ldi	r24, 0x90	; 144
    2434:	91 e0       	ldi	r25, 0x01	; 1
    2436:	9c 83       	std	Y+4, r25	; 0x04
    2438:	8b 83       	std	Y+3, r24	; 0x03
    243a:	8b 81       	ldd	r24, Y+3	; 0x03
    243c:	9c 81       	ldd	r25, Y+4	; 0x04
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	f1 f7       	brne	.-4      	; 0x243e <LCD_sendCommand+0x89a>
    2442:	9c 83       	std	Y+4, r25	; 0x04
    2444:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2446:	8d 81       	ldd	r24, Y+5	; 0x05
    2448:	9e 81       	ldd	r25, Y+6	; 0x06
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	9e 83       	std	Y+6, r25	; 0x06
    244e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2450:	8d 81       	ldd	r24, Y+5	; 0x05
    2452:	9e 81       	ldd	r25, Y+6	; 0x06
    2454:	00 97       	sbiw	r24, 0x00	; 0
    2456:	69 f7       	brne	.-38     	; 0x2432 <LCD_sendCommand+0x88e>
    2458:	14 c0       	rjmp	.+40     	; 0x2482 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245a:	6f 81       	ldd	r22, Y+7	; 0x07
    245c:	78 85       	ldd	r23, Y+8	; 0x08
    245e:	89 85       	ldd	r24, Y+9	; 0x09
    2460:	9a 85       	ldd	r25, Y+10	; 0x0a
    2462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	9e 83       	std	Y+6, r25	; 0x06
    246c:	8d 83       	std	Y+5, r24	; 0x05
    246e:	8d 81       	ldd	r24, Y+5	; 0x05
    2470:	9e 81       	ldd	r25, Y+6	; 0x06
    2472:	9a 83       	std	Y+2, r25	; 0x02
    2474:	89 83       	std	Y+1, r24	; 0x01
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	9a 81       	ldd	r25, Y+2	; 0x02
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	f1 f7       	brne	.-4      	; 0x247a <LCD_sendCommand+0x8d6>
    247e:	9a 83       	std	Y+2, r25	; 0x02
    2480:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2482:	cd 59       	subi	r28, 0x9D	; 157
    2484:	df 4f       	sbci	r29, 0xFF	; 255
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61
    2490:	cf 91       	pop	r28
    2492:	df 91       	pop	r29
    2494:	1f 91       	pop	r17
    2496:	0f 91       	pop	r16
    2498:	08 95       	ret

0000249a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    249a:	0f 93       	push	r16
    249c:	1f 93       	push	r17
    249e:	df 93       	push	r29
    24a0:	cf 93       	push	r28
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	c3 56       	subi	r28, 0x63	; 99
    24a8:	d0 40       	sbci	r29, 0x00	; 0
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	de bf       	out	0x3e, r29	; 62
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	cd bf       	out	0x3d, r28	; 61
    24b4:	fe 01       	movw	r30, r28
    24b6:	ed 59       	subi	r30, 0x9D	; 157
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	61 e0       	ldi	r22, 0x01	; 1
    24c0:	41 e0       	ldi	r20, 0x01	; 1
    24c2:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
    24c6:	fe 01       	movw	r30, r28
    24c8:	e1 5a       	subi	r30, 0xA1	; 161
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	a0 e8       	ldi	r26, 0x80	; 128
    24d2:	bf e3       	ldi	r27, 0x3F	; 63
    24d4:	80 83       	st	Z, r24
    24d6:	91 83       	std	Z+1, r25	; 0x01
    24d8:	a2 83       	std	Z+2, r26	; 0x02
    24da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24dc:	8e 01       	movw	r16, r28
    24de:	05 5a       	subi	r16, 0xA5	; 165
    24e0:	1f 4f       	sbci	r17, 0xFF	; 255
    24e2:	fe 01       	movw	r30, r28
    24e4:	e1 5a       	subi	r30, 0xA1	; 161
    24e6:	ff 4f       	sbci	r31, 0xFF	; 255
    24e8:	60 81       	ld	r22, Z
    24ea:	71 81       	ldd	r23, Z+1	; 0x01
    24ec:	82 81       	ldd	r24, Z+2	; 0x02
    24ee:	93 81       	ldd	r25, Z+3	; 0x03
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	4a e7       	ldi	r20, 0x7A	; 122
    24f6:	55 e4       	ldi	r21, 0x45	; 69
    24f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	f8 01       	movw	r30, r16
    2502:	80 83       	st	Z, r24
    2504:	91 83       	std	Z+1, r25	; 0x01
    2506:	a2 83       	std	Z+2, r26	; 0x02
    2508:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    250a:	fe 01       	movw	r30, r28
    250c:	e5 5a       	subi	r30, 0xA5	; 165
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	60 81       	ld	r22, Z
    2512:	71 81       	ldd	r23, Z+1	; 0x01
    2514:	82 81       	ldd	r24, Z+2	; 0x02
    2516:	93 81       	ldd	r25, Z+3	; 0x03
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e8       	ldi	r20, 0x80	; 128
    251e:	5f e3       	ldi	r21, 0x3F	; 63
    2520:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2524:	88 23       	and	r24, r24
    2526:	44 f4       	brge	.+16     	; 0x2538 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2528:	fe 01       	movw	r30, r28
    252a:	e7 5a       	subi	r30, 0xA7	; 167
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	91 83       	std	Z+1, r25	; 0x01
    2534:	80 83       	st	Z, r24
    2536:	64 c0       	rjmp	.+200    	; 0x2600 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2538:	fe 01       	movw	r30, r28
    253a:	e5 5a       	subi	r30, 0xA5	; 165
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	60 81       	ld	r22, Z
    2540:	71 81       	ldd	r23, Z+1	; 0x01
    2542:	82 81       	ldd	r24, Z+2	; 0x02
    2544:	93 81       	ldd	r25, Z+3	; 0x03
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	3f ef       	ldi	r19, 0xFF	; 255
    254a:	4f e7       	ldi	r20, 0x7F	; 127
    254c:	57 e4       	ldi	r21, 0x47	; 71
    254e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2552:	18 16       	cp	r1, r24
    2554:	0c f0       	brlt	.+2      	; 0x2558 <LCD_displayCharacter+0xbe>
    2556:	43 c0       	rjmp	.+134    	; 0x25de <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2558:	fe 01       	movw	r30, r28
    255a:	e1 5a       	subi	r30, 0xA1	; 161
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	60 81       	ld	r22, Z
    2560:	71 81       	ldd	r23, Z+1	; 0x01
    2562:	82 81       	ldd	r24, Z+2	; 0x02
    2564:	93 81       	ldd	r25, Z+3	; 0x03
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e2       	ldi	r20, 0x20	; 32
    256c:	51 e4       	ldi	r21, 0x41	; 65
    256e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	8e 01       	movw	r16, r28
    2578:	07 5a       	subi	r16, 0xA7	; 167
    257a:	1f 4f       	sbci	r17, 0xFF	; 255
    257c:	bc 01       	movw	r22, r24
    257e:	cd 01       	movw	r24, r26
    2580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	f8 01       	movw	r30, r16
    258a:	91 83       	std	Z+1, r25	; 0x01
    258c:	80 83       	st	Z, r24
    258e:	1f c0       	rjmp	.+62     	; 0x25ce <LCD_displayCharacter+0x134>
    2590:	fe 01       	movw	r30, r28
    2592:	e9 5a       	subi	r30, 0xA9	; 169
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	80 e9       	ldi	r24, 0x90	; 144
    2598:	91 e0       	ldi	r25, 0x01	; 1
    259a:	91 83       	std	Z+1, r25	; 0x01
    259c:	80 83       	st	Z, r24
    259e:	fe 01       	movw	r30, r28
    25a0:	e9 5a       	subi	r30, 0xA9	; 169
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	80 81       	ld	r24, Z
    25a6:	91 81       	ldd	r25, Z+1	; 0x01
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <LCD_displayCharacter+0x10e>
    25ac:	fe 01       	movw	r30, r28
    25ae:	e9 5a       	subi	r30, 0xA9	; 169
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	91 83       	std	Z+1, r25	; 0x01
    25b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b6:	de 01       	movw	r26, r28
    25b8:	a7 5a       	subi	r26, 0xA7	; 167
    25ba:	bf 4f       	sbci	r27, 0xFF	; 255
    25bc:	fe 01       	movw	r30, r28
    25be:	e7 5a       	subi	r30, 0xA7	; 167
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	80 81       	ld	r24, Z
    25c4:	91 81       	ldd	r25, Z+1	; 0x01
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	11 96       	adiw	r26, 0x01	; 1
    25ca:	9c 93       	st	X, r25
    25cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ce:	fe 01       	movw	r30, r28
    25d0:	e7 5a       	subi	r30, 0xA7	; 167
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	80 81       	ld	r24, Z
    25d6:	91 81       	ldd	r25, Z+1	; 0x01
    25d8:	00 97       	sbiw	r24, 0x00	; 0
    25da:	d1 f6       	brne	.-76     	; 0x2590 <LCD_displayCharacter+0xf6>
    25dc:	27 c0       	rjmp	.+78     	; 0x262c <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25de:	8e 01       	movw	r16, r28
    25e0:	07 5a       	subi	r16, 0xA7	; 167
    25e2:	1f 4f       	sbci	r17, 0xFF	; 255
    25e4:	fe 01       	movw	r30, r28
    25e6:	e5 5a       	subi	r30, 0xA5	; 165
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	60 81       	ld	r22, Z
    25ec:	71 81       	ldd	r23, Z+1	; 0x01
    25ee:	82 81       	ldd	r24, Z+2	; 0x02
    25f0:	93 81       	ldd	r25, Z+3	; 0x03
    25f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	f8 01       	movw	r30, r16
    25fc:	91 83       	std	Z+1, r25	; 0x01
    25fe:	80 83       	st	Z, r24
    2600:	de 01       	movw	r26, r28
    2602:	ab 5a       	subi	r26, 0xAB	; 171
    2604:	bf 4f       	sbci	r27, 0xFF	; 255
    2606:	fe 01       	movw	r30, r28
    2608:	e7 5a       	subi	r30, 0xA7	; 167
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	80 81       	ld	r24, Z
    260e:	91 81       	ldd	r25, Z+1	; 0x01
    2610:	8d 93       	st	X+, r24
    2612:	9c 93       	st	X, r25
    2614:	fe 01       	movw	r30, r28
    2616:	eb 5a       	subi	r30, 0xAB	; 171
    2618:	ff 4f       	sbci	r31, 0xFF	; 255
    261a:	80 81       	ld	r24, Z
    261c:	91 81       	ldd	r25, Z+1	; 0x01
    261e:	01 97       	sbiw	r24, 0x01	; 1
    2620:	f1 f7       	brne	.-4      	; 0x261e <LCD_displayCharacter+0x184>
    2622:	fe 01       	movw	r30, r28
    2624:	eb 5a       	subi	r30, 0xAB	; 171
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	91 83       	std	Z+1, r25	; 0x01
    262a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	62 e0       	ldi	r22, 0x02	; 2
    2630:	41 e0       	ldi	r20, 0x01	; 1
    2632:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
    2636:	fe 01       	movw	r30, r28
    2638:	ef 5a       	subi	r30, 0xAF	; 175
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	a0 e8       	ldi	r26, 0x80	; 128
    2642:	bf e3       	ldi	r27, 0x3F	; 63
    2644:	80 83       	st	Z, r24
    2646:	91 83       	std	Z+1, r25	; 0x01
    2648:	a2 83       	std	Z+2, r26	; 0x02
    264a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264c:	8e 01       	movw	r16, r28
    264e:	03 5b       	subi	r16, 0xB3	; 179
    2650:	1f 4f       	sbci	r17, 0xFF	; 255
    2652:	fe 01       	movw	r30, r28
    2654:	ef 5a       	subi	r30, 0xAF	; 175
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	60 81       	ld	r22, Z
    265a:	71 81       	ldd	r23, Z+1	; 0x01
    265c:	82 81       	ldd	r24, Z+2	; 0x02
    265e:	93 81       	ldd	r25, Z+3	; 0x03
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	4a e7       	ldi	r20, 0x7A	; 122
    2666:	55 e4       	ldi	r21, 0x45	; 69
    2668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	f8 01       	movw	r30, r16
    2672:	80 83       	st	Z, r24
    2674:	91 83       	std	Z+1, r25	; 0x01
    2676:	a2 83       	std	Z+2, r26	; 0x02
    2678:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    267a:	fe 01       	movw	r30, r28
    267c:	e3 5b       	subi	r30, 0xB3	; 179
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	60 81       	ld	r22, Z
    2682:	71 81       	ldd	r23, Z+1	; 0x01
    2684:	82 81       	ldd	r24, Z+2	; 0x02
    2686:	93 81       	ldd	r25, Z+3	; 0x03
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e8       	ldi	r20, 0x80	; 128
    268e:	5f e3       	ldi	r21, 0x3F	; 63
    2690:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2694:	88 23       	and	r24, r24
    2696:	44 f4       	brge	.+16     	; 0x26a8 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2698:	fe 01       	movw	r30, r28
    269a:	e5 5b       	subi	r30, 0xB5	; 181
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	91 83       	std	Z+1, r25	; 0x01
    26a4:	80 83       	st	Z, r24
    26a6:	64 c0       	rjmp	.+200    	; 0x2770 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    26a8:	fe 01       	movw	r30, r28
    26aa:	e3 5b       	subi	r30, 0xB3	; 179
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	60 81       	ld	r22, Z
    26b0:	71 81       	ldd	r23, Z+1	; 0x01
    26b2:	82 81       	ldd	r24, Z+2	; 0x02
    26b4:	93 81       	ldd	r25, Z+3	; 0x03
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	3f ef       	ldi	r19, 0xFF	; 255
    26ba:	4f e7       	ldi	r20, 0x7F	; 127
    26bc:	57 e4       	ldi	r21, 0x47	; 71
    26be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26c2:	18 16       	cp	r1, r24
    26c4:	0c f0       	brlt	.+2      	; 0x26c8 <LCD_displayCharacter+0x22e>
    26c6:	43 c0       	rjmp	.+134    	; 0x274e <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c8:	fe 01       	movw	r30, r28
    26ca:	ef 5a       	subi	r30, 0xAF	; 175
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	60 81       	ld	r22, Z
    26d0:	71 81       	ldd	r23, Z+1	; 0x01
    26d2:	82 81       	ldd	r24, Z+2	; 0x02
    26d4:	93 81       	ldd	r25, Z+3	; 0x03
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e2       	ldi	r20, 0x20	; 32
    26dc:	51 e4       	ldi	r21, 0x41	; 65
    26de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	8e 01       	movw	r16, r28
    26e8:	05 5b       	subi	r16, 0xB5	; 181
    26ea:	1f 4f       	sbci	r17, 0xFF	; 255
    26ec:	bc 01       	movw	r22, r24
    26ee:	cd 01       	movw	r24, r26
    26f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	f8 01       	movw	r30, r16
    26fa:	91 83       	std	Z+1, r25	; 0x01
    26fc:	80 83       	st	Z, r24
    26fe:	1f c0       	rjmp	.+62     	; 0x273e <LCD_displayCharacter+0x2a4>
    2700:	fe 01       	movw	r30, r28
    2702:	e7 5b       	subi	r30, 0xB7	; 183
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	80 e9       	ldi	r24, 0x90	; 144
    2708:	91 e0       	ldi	r25, 0x01	; 1
    270a:	91 83       	std	Z+1, r25	; 0x01
    270c:	80 83       	st	Z, r24
    270e:	fe 01       	movw	r30, r28
    2710:	e7 5b       	subi	r30, 0xB7	; 183
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	80 81       	ld	r24, Z
    2716:	91 81       	ldd	r25, Z+1	; 0x01
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	f1 f7       	brne	.-4      	; 0x2718 <LCD_displayCharacter+0x27e>
    271c:	fe 01       	movw	r30, r28
    271e:	e7 5b       	subi	r30, 0xB7	; 183
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	91 83       	std	Z+1, r25	; 0x01
    2724:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2726:	de 01       	movw	r26, r28
    2728:	a5 5b       	subi	r26, 0xB5	; 181
    272a:	bf 4f       	sbci	r27, 0xFF	; 255
    272c:	fe 01       	movw	r30, r28
    272e:	e5 5b       	subi	r30, 0xB5	; 181
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	80 81       	ld	r24, Z
    2734:	91 81       	ldd	r25, Z+1	; 0x01
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	11 96       	adiw	r26, 0x01	; 1
    273a:	9c 93       	st	X, r25
    273c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273e:	fe 01       	movw	r30, r28
    2740:	e5 5b       	subi	r30, 0xB5	; 181
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	80 81       	ld	r24, Z
    2746:	91 81       	ldd	r25, Z+1	; 0x01
    2748:	00 97       	sbiw	r24, 0x00	; 0
    274a:	d1 f6       	brne	.-76     	; 0x2700 <LCD_displayCharacter+0x266>
    274c:	27 c0       	rjmp	.+78     	; 0x279c <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274e:	8e 01       	movw	r16, r28
    2750:	05 5b       	subi	r16, 0xB5	; 181
    2752:	1f 4f       	sbci	r17, 0xFF	; 255
    2754:	fe 01       	movw	r30, r28
    2756:	e3 5b       	subi	r30, 0xB3	; 179
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	60 81       	ld	r22, Z
    275c:	71 81       	ldd	r23, Z+1	; 0x01
    275e:	82 81       	ldd	r24, Z+2	; 0x02
    2760:	93 81       	ldd	r25, Z+3	; 0x03
    2762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	f8 01       	movw	r30, r16
    276c:	91 83       	std	Z+1, r25	; 0x01
    276e:	80 83       	st	Z, r24
    2770:	de 01       	movw	r26, r28
    2772:	a9 5b       	subi	r26, 0xB9	; 185
    2774:	bf 4f       	sbci	r27, 0xFF	; 255
    2776:	fe 01       	movw	r30, r28
    2778:	e5 5b       	subi	r30, 0xB5	; 181
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	80 81       	ld	r24, Z
    277e:	91 81       	ldd	r25, Z+1	; 0x01
    2780:	8d 93       	st	X+, r24
    2782:	9c 93       	st	X, r25
    2784:	fe 01       	movw	r30, r28
    2786:	e9 5b       	subi	r30, 0xB9	; 185
    2788:	ff 4f       	sbci	r31, 0xFF	; 255
    278a:	80 81       	ld	r24, Z
    278c:	91 81       	ldd	r25, Z+1	; 0x01
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <LCD_displayCharacter+0x2f4>
    2792:	fe 01       	movw	r30, r28
    2794:	e9 5b       	subi	r30, 0xB9	; 185
    2796:	ff 4f       	sbci	r31, 0xFF	; 255
    2798:	91 83       	std	Z+1, r25	; 0x01
    279a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    279c:	fe 01       	movw	r30, r28
    279e:	ed 59       	subi	r30, 0x9D	; 157
    27a0:	ff 4f       	sbci	r31, 0xFF	; 255
    27a2:	80 81       	ld	r24, Z
    27a4:	88 2f       	mov	r24, r24
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	80 71       	andi	r24, 0x10	; 16
    27aa:	90 70       	andi	r25, 0x00	; 0
    27ac:	95 95       	asr	r25
    27ae:	87 95       	ror	r24
    27b0:	95 95       	asr	r25
    27b2:	87 95       	ror	r24
    27b4:	95 95       	asr	r25
    27b6:	87 95       	ror	r24
    27b8:	95 95       	asr	r25
    27ba:	87 95       	ror	r24
    27bc:	98 2f       	mov	r25, r24
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	63 e0       	ldi	r22, 0x03	; 3
    27c2:	49 2f       	mov	r20, r25
    27c4:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    27c8:	fe 01       	movw	r30, r28
    27ca:	ed 59       	subi	r30, 0x9D	; 157
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	80 81       	ld	r24, Z
    27d0:	88 2f       	mov	r24, r24
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	80 72       	andi	r24, 0x20	; 32
    27d6:	90 70       	andi	r25, 0x00	; 0
    27d8:	95 95       	asr	r25
    27da:	87 95       	ror	r24
    27dc:	95 95       	asr	r25
    27de:	87 95       	ror	r24
    27e0:	95 95       	asr	r25
    27e2:	87 95       	ror	r24
    27e4:	95 95       	asr	r25
    27e6:	87 95       	ror	r24
    27e8:	95 95       	asr	r25
    27ea:	87 95       	ror	r24
    27ec:	98 2f       	mov	r25, r24
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	64 e0       	ldi	r22, 0x04	; 4
    27f2:	49 2f       	mov	r20, r25
    27f4:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    27f8:	fe 01       	movw	r30, r28
    27fa:	ed 59       	subi	r30, 0x9D	; 157
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	80 81       	ld	r24, Z
    2800:	88 2f       	mov	r24, r24
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	80 74       	andi	r24, 0x40	; 64
    2806:	90 70       	andi	r25, 0x00	; 0
    2808:	08 2e       	mov	r0, r24
    280a:	89 2f       	mov	r24, r25
    280c:	00 0c       	add	r0, r0
    280e:	88 1f       	adc	r24, r24
    2810:	99 0b       	sbc	r25, r25
    2812:	00 0c       	add	r0, r0
    2814:	88 1f       	adc	r24, r24
    2816:	99 1f       	adc	r25, r25
    2818:	98 2f       	mov	r25, r24
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	65 e0       	ldi	r22, 0x05	; 5
    281e:	49 2f       	mov	r20, r25
    2820:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2824:	fe 01       	movw	r30, r28
    2826:	ed 59       	subi	r30, 0x9D	; 157
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	80 81       	ld	r24, Z
    282c:	98 2f       	mov	r25, r24
    282e:	99 1f       	adc	r25, r25
    2830:	99 27       	eor	r25, r25
    2832:	99 1f       	adc	r25, r25
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	66 e0       	ldi	r22, 0x06	; 6
    2838:	49 2f       	mov	r20, r25
    283a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
    283e:	fe 01       	movw	r30, r28
    2840:	ed 5b       	subi	r30, 0xBD	; 189
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	a0 e8       	ldi	r26, 0x80	; 128
    284a:	bf e3       	ldi	r27, 0x3F	; 63
    284c:	80 83       	st	Z, r24
    284e:	91 83       	std	Z+1, r25	; 0x01
    2850:	a2 83       	std	Z+2, r26	; 0x02
    2852:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2854:	8e 01       	movw	r16, r28
    2856:	01 5c       	subi	r16, 0xC1	; 193
    2858:	1f 4f       	sbci	r17, 0xFF	; 255
    285a:	fe 01       	movw	r30, r28
    285c:	ed 5b       	subi	r30, 0xBD	; 189
    285e:	ff 4f       	sbci	r31, 0xFF	; 255
    2860:	60 81       	ld	r22, Z
    2862:	71 81       	ldd	r23, Z+1	; 0x01
    2864:	82 81       	ldd	r24, Z+2	; 0x02
    2866:	93 81       	ldd	r25, Z+3	; 0x03
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	4a e7       	ldi	r20, 0x7A	; 122
    286e:	55 e4       	ldi	r21, 0x45	; 69
    2870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	f8 01       	movw	r30, r16
    287a:	80 83       	st	Z, r24
    287c:	91 83       	std	Z+1, r25	; 0x01
    287e:	a2 83       	std	Z+2, r26	; 0x02
    2880:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2882:	fe 01       	movw	r30, r28
    2884:	ff 96       	adiw	r30, 0x3f	; 63
    2886:	60 81       	ld	r22, Z
    2888:	71 81       	ldd	r23, Z+1	; 0x01
    288a:	82 81       	ldd	r24, Z+2	; 0x02
    288c:	93 81       	ldd	r25, Z+3	; 0x03
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e8       	ldi	r20, 0x80	; 128
    2894:	5f e3       	ldi	r21, 0x3F	; 63
    2896:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    289a:	88 23       	and	r24, r24
    289c:	2c f4       	brge	.+10     	; 0x28a8 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	9e af       	std	Y+62, r25	; 0x3e
    28a4:	8d af       	std	Y+61, r24	; 0x3d
    28a6:	46 c0       	rjmp	.+140    	; 0x2934 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    28a8:	fe 01       	movw	r30, r28
    28aa:	ff 96       	adiw	r30, 0x3f	; 63
    28ac:	60 81       	ld	r22, Z
    28ae:	71 81       	ldd	r23, Z+1	; 0x01
    28b0:	82 81       	ldd	r24, Z+2	; 0x02
    28b2:	93 81       	ldd	r25, Z+3	; 0x03
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	3f ef       	ldi	r19, 0xFF	; 255
    28b8:	4f e7       	ldi	r20, 0x7F	; 127
    28ba:	57 e4       	ldi	r21, 0x47	; 71
    28bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28c0:	18 16       	cp	r1, r24
    28c2:	64 f5       	brge	.+88     	; 0x291c <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c4:	fe 01       	movw	r30, r28
    28c6:	ed 5b       	subi	r30, 0xBD	; 189
    28c8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ca:	60 81       	ld	r22, Z
    28cc:	71 81       	ldd	r23, Z+1	; 0x01
    28ce:	82 81       	ldd	r24, Z+2	; 0x02
    28d0:	93 81       	ldd	r25, Z+3	; 0x03
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	40 e2       	ldi	r20, 0x20	; 32
    28d8:	51 e4       	ldi	r21, 0x41	; 65
    28da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	bc 01       	movw	r22, r24
    28e4:	cd 01       	movw	r24, r26
    28e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	9e af       	std	Y+62, r25	; 0x3e
    28f0:	8d af       	std	Y+61, r24	; 0x3d
    28f2:	0f c0       	rjmp	.+30     	; 0x2912 <LCD_displayCharacter+0x478>
    28f4:	80 e9       	ldi	r24, 0x90	; 144
    28f6:	91 e0       	ldi	r25, 0x01	; 1
    28f8:	9c af       	std	Y+60, r25	; 0x3c
    28fa:	8b af       	std	Y+59, r24	; 0x3b
    28fc:	8b ad       	ldd	r24, Y+59	; 0x3b
    28fe:	9c ad       	ldd	r25, Y+60	; 0x3c
    2900:	01 97       	sbiw	r24, 0x01	; 1
    2902:	f1 f7       	brne	.-4      	; 0x2900 <LCD_displayCharacter+0x466>
    2904:	9c af       	std	Y+60, r25	; 0x3c
    2906:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2908:	8d ad       	ldd	r24, Y+61	; 0x3d
    290a:	9e ad       	ldd	r25, Y+62	; 0x3e
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	9e af       	std	Y+62, r25	; 0x3e
    2910:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2912:	8d ad       	ldd	r24, Y+61	; 0x3d
    2914:	9e ad       	ldd	r25, Y+62	; 0x3e
    2916:	00 97       	sbiw	r24, 0x00	; 0
    2918:	69 f7       	brne	.-38     	; 0x28f4 <LCD_displayCharacter+0x45a>
    291a:	16 c0       	rjmp	.+44     	; 0x2948 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    291c:	fe 01       	movw	r30, r28
    291e:	ff 96       	adiw	r30, 0x3f	; 63
    2920:	60 81       	ld	r22, Z
    2922:	71 81       	ldd	r23, Z+1	; 0x01
    2924:	82 81       	ldd	r24, Z+2	; 0x02
    2926:	93 81       	ldd	r25, Z+3	; 0x03
    2928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	9e af       	std	Y+62, r25	; 0x3e
    2932:	8d af       	std	Y+61, r24	; 0x3d
    2934:	8d ad       	ldd	r24, Y+61	; 0x3d
    2936:	9e ad       	ldd	r25, Y+62	; 0x3e
    2938:	9a af       	std	Y+58, r25	; 0x3a
    293a:	89 af       	std	Y+57, r24	; 0x39
    293c:	89 ad       	ldd	r24, Y+57	; 0x39
    293e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2940:	01 97       	sbiw	r24, 0x01	; 1
    2942:	f1 f7       	brne	.-4      	; 0x2940 <LCD_displayCharacter+0x4a6>
    2944:	9a af       	std	Y+58, r25	; 0x3a
    2946:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	62 e0       	ldi	r22, 0x02	; 2
    294c:	40 e0       	ldi	r20, 0x00	; 0
    294e:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	a0 e8       	ldi	r26, 0x80	; 128
    2958:	bf e3       	ldi	r27, 0x3F	; 63
    295a:	8d ab       	std	Y+53, r24	; 0x35
    295c:	9e ab       	std	Y+54, r25	; 0x36
    295e:	af ab       	std	Y+55, r26	; 0x37
    2960:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2962:	6d a9       	ldd	r22, Y+53	; 0x35
    2964:	7e a9       	ldd	r23, Y+54	; 0x36
    2966:	8f a9       	ldd	r24, Y+55	; 0x37
    2968:	98 ad       	ldd	r25, Y+56	; 0x38
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	4a e7       	ldi	r20, 0x7A	; 122
    2970:	55 e4       	ldi	r21, 0x45	; 69
    2972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	89 ab       	std	Y+49, r24	; 0x31
    297c:	9a ab       	std	Y+50, r25	; 0x32
    297e:	ab ab       	std	Y+51, r26	; 0x33
    2980:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2982:	69 a9       	ldd	r22, Y+49	; 0x31
    2984:	7a a9       	ldd	r23, Y+50	; 0x32
    2986:	8b a9       	ldd	r24, Y+51	; 0x33
    2988:	9c a9       	ldd	r25, Y+52	; 0x34
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	40 e8       	ldi	r20, 0x80	; 128
    2990:	5f e3       	ldi	r21, 0x3F	; 63
    2992:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2996:	88 23       	and	r24, r24
    2998:	2c f4       	brge	.+10     	; 0x29a4 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	98 ab       	std	Y+48, r25	; 0x30
    29a0:	8f a7       	std	Y+47, r24	; 0x2f
    29a2:	3f c0       	rjmp	.+126    	; 0x2a22 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    29a4:	69 a9       	ldd	r22, Y+49	; 0x31
    29a6:	7a a9       	ldd	r23, Y+50	; 0x32
    29a8:	8b a9       	ldd	r24, Y+51	; 0x33
    29aa:	9c a9       	ldd	r25, Y+52	; 0x34
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	3f ef       	ldi	r19, 0xFF	; 255
    29b0:	4f e7       	ldi	r20, 0x7F	; 127
    29b2:	57 e4       	ldi	r21, 0x47	; 71
    29b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29b8:	18 16       	cp	r1, r24
    29ba:	4c f5       	brge	.+82     	; 0x2a0e <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29bc:	6d a9       	ldd	r22, Y+53	; 0x35
    29be:	7e a9       	ldd	r23, Y+54	; 0x36
    29c0:	8f a9       	ldd	r24, Y+55	; 0x37
    29c2:	98 ad       	ldd	r25, Y+56	; 0x38
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	40 e2       	ldi	r20, 0x20	; 32
    29ca:	51 e4       	ldi	r21, 0x41	; 65
    29cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	bc 01       	movw	r22, r24
    29d6:	cd 01       	movw	r24, r26
    29d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	98 ab       	std	Y+48, r25	; 0x30
    29e2:	8f a7       	std	Y+47, r24	; 0x2f
    29e4:	0f c0       	rjmp	.+30     	; 0x2a04 <LCD_displayCharacter+0x56a>
    29e6:	80 e9       	ldi	r24, 0x90	; 144
    29e8:	91 e0       	ldi	r25, 0x01	; 1
    29ea:	9e a7       	std	Y+46, r25	; 0x2e
    29ec:	8d a7       	std	Y+45, r24	; 0x2d
    29ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    29f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    29f2:	01 97       	sbiw	r24, 0x01	; 1
    29f4:	f1 f7       	brne	.-4      	; 0x29f2 <LCD_displayCharacter+0x558>
    29f6:	9e a7       	std	Y+46, r25	; 0x2e
    29f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    29fc:	98 a9       	ldd	r25, Y+48	; 0x30
    29fe:	01 97       	sbiw	r24, 0x01	; 1
    2a00:	98 ab       	std	Y+48, r25	; 0x30
    2a02:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a04:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a06:	98 a9       	ldd	r25, Y+48	; 0x30
    2a08:	00 97       	sbiw	r24, 0x00	; 0
    2a0a:	69 f7       	brne	.-38     	; 0x29e6 <LCD_displayCharacter+0x54c>
    2a0c:	14 c0       	rjmp	.+40     	; 0x2a36 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0e:	69 a9       	ldd	r22, Y+49	; 0x31
    2a10:	7a a9       	ldd	r23, Y+50	; 0x32
    2a12:	8b a9       	ldd	r24, Y+51	; 0x33
    2a14:	9c a9       	ldd	r25, Y+52	; 0x34
    2a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	98 ab       	std	Y+48, r25	; 0x30
    2a20:	8f a7       	std	Y+47, r24	; 0x2f
    2a22:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a24:	98 a9       	ldd	r25, Y+48	; 0x30
    2a26:	9c a7       	std	Y+44, r25	; 0x2c
    2a28:	8b a7       	std	Y+43, r24	; 0x2b
    2a2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a2c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a2e:	01 97       	sbiw	r24, 0x01	; 1
    2a30:	f1 f7       	brne	.-4      	; 0x2a2e <LCD_displayCharacter+0x594>
    2a32:	9c a7       	std	Y+44, r25	; 0x2c
    2a34:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	62 e0       	ldi	r22, 0x02	; 2
    2a3a:	41 e0       	ldi	r20, 0x01	; 1
    2a3c:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
    2a40:	80 e0       	ldi	r24, 0x00	; 0
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	a0 e8       	ldi	r26, 0x80	; 128
    2a46:	bf e3       	ldi	r27, 0x3F	; 63
    2a48:	8f a3       	std	Y+39, r24	; 0x27
    2a4a:	98 a7       	std	Y+40, r25	; 0x28
    2a4c:	a9 a7       	std	Y+41, r26	; 0x29
    2a4e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a50:	6f a1       	ldd	r22, Y+39	; 0x27
    2a52:	78 a5       	ldd	r23, Y+40	; 0x28
    2a54:	89 a5       	ldd	r24, Y+41	; 0x29
    2a56:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	4a e7       	ldi	r20, 0x7A	; 122
    2a5e:	55 e4       	ldi	r21, 0x45	; 69
    2a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	8b a3       	std	Y+35, r24	; 0x23
    2a6a:	9c a3       	std	Y+36, r25	; 0x24
    2a6c:	ad a3       	std	Y+37, r26	; 0x25
    2a6e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a70:	6b a1       	ldd	r22, Y+35	; 0x23
    2a72:	7c a1       	ldd	r23, Y+36	; 0x24
    2a74:	8d a1       	ldd	r24, Y+37	; 0x25
    2a76:	9e a1       	ldd	r25, Y+38	; 0x26
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	40 e8       	ldi	r20, 0x80	; 128
    2a7e:	5f e3       	ldi	r21, 0x3F	; 63
    2a80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a84:	88 23       	and	r24, r24
    2a86:	2c f4       	brge	.+10     	; 0x2a92 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	9a a3       	std	Y+34, r25	; 0x22
    2a8e:	89 a3       	std	Y+33, r24	; 0x21
    2a90:	3f c0       	rjmp	.+126    	; 0x2b10 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2a92:	6b a1       	ldd	r22, Y+35	; 0x23
    2a94:	7c a1       	ldd	r23, Y+36	; 0x24
    2a96:	8d a1       	ldd	r24, Y+37	; 0x25
    2a98:	9e a1       	ldd	r25, Y+38	; 0x26
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	3f ef       	ldi	r19, 0xFF	; 255
    2a9e:	4f e7       	ldi	r20, 0x7F	; 127
    2aa0:	57 e4       	ldi	r21, 0x47	; 71
    2aa2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aa6:	18 16       	cp	r1, r24
    2aa8:	4c f5       	brge	.+82     	; 0x2afc <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aaa:	6f a1       	ldd	r22, Y+39	; 0x27
    2aac:	78 a5       	ldd	r23, Y+40	; 0x28
    2aae:	89 a5       	ldd	r24, Y+41	; 0x29
    2ab0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	40 e2       	ldi	r20, 0x20	; 32
    2ab8:	51 e4       	ldi	r21, 0x41	; 65
    2aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	bc 01       	movw	r22, r24
    2ac4:	cd 01       	movw	r24, r26
    2ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aca:	dc 01       	movw	r26, r24
    2acc:	cb 01       	movw	r24, r22
    2ace:	9a a3       	std	Y+34, r25	; 0x22
    2ad0:	89 a3       	std	Y+33, r24	; 0x21
    2ad2:	0f c0       	rjmp	.+30     	; 0x2af2 <LCD_displayCharacter+0x658>
    2ad4:	80 e9       	ldi	r24, 0x90	; 144
    2ad6:	91 e0       	ldi	r25, 0x01	; 1
    2ad8:	98 a3       	std	Y+32, r25	; 0x20
    2ada:	8f 8f       	std	Y+31, r24	; 0x1f
    2adc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ade:	98 a1       	ldd	r25, Y+32	; 0x20
    2ae0:	01 97       	sbiw	r24, 0x01	; 1
    2ae2:	f1 f7       	brne	.-4      	; 0x2ae0 <LCD_displayCharacter+0x646>
    2ae4:	98 a3       	std	Y+32, r25	; 0x20
    2ae6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae8:	89 a1       	ldd	r24, Y+33	; 0x21
    2aea:	9a a1       	ldd	r25, Y+34	; 0x22
    2aec:	01 97       	sbiw	r24, 0x01	; 1
    2aee:	9a a3       	std	Y+34, r25	; 0x22
    2af0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af2:	89 a1       	ldd	r24, Y+33	; 0x21
    2af4:	9a a1       	ldd	r25, Y+34	; 0x22
    2af6:	00 97       	sbiw	r24, 0x00	; 0
    2af8:	69 f7       	brne	.-38     	; 0x2ad4 <LCD_displayCharacter+0x63a>
    2afa:	14 c0       	rjmp	.+40     	; 0x2b24 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2afc:	6b a1       	ldd	r22, Y+35	; 0x23
    2afe:	7c a1       	ldd	r23, Y+36	; 0x24
    2b00:	8d a1       	ldd	r24, Y+37	; 0x25
    2b02:	9e a1       	ldd	r25, Y+38	; 0x26
    2b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	9a a3       	std	Y+34, r25	; 0x22
    2b0e:	89 a3       	std	Y+33, r24	; 0x21
    2b10:	89 a1       	ldd	r24, Y+33	; 0x21
    2b12:	9a a1       	ldd	r25, Y+34	; 0x22
    2b14:	9e 8f       	std	Y+30, r25	; 0x1e
    2b16:	8d 8f       	std	Y+29, r24	; 0x1d
    2b18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b1a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b1c:	01 97       	sbiw	r24, 0x01	; 1
    2b1e:	f1 f7       	brne	.-4      	; 0x2b1c <LCD_displayCharacter+0x682>
    2b20:	9e 8f       	std	Y+30, r25	; 0x1e
    2b22:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2b24:	fe 01       	movw	r30, r28
    2b26:	ed 59       	subi	r30, 0x9D	; 157
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	80 81       	ld	r24, Z
    2b2c:	98 2f       	mov	r25, r24
    2b2e:	91 70       	andi	r25, 0x01	; 1
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	63 e0       	ldi	r22, 0x03	; 3
    2b34:	49 2f       	mov	r20, r25
    2b36:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2b3a:	fe 01       	movw	r30, r28
    2b3c:	ed 59       	subi	r30, 0x9D	; 157
    2b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b40:	80 81       	ld	r24, Z
    2b42:	88 2f       	mov	r24, r24
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	82 70       	andi	r24, 0x02	; 2
    2b48:	90 70       	andi	r25, 0x00	; 0
    2b4a:	95 95       	asr	r25
    2b4c:	87 95       	ror	r24
    2b4e:	98 2f       	mov	r25, r24
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	64 e0       	ldi	r22, 0x04	; 4
    2b54:	49 2f       	mov	r20, r25
    2b56:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	ed 59       	subi	r30, 0x9D	; 157
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	80 81       	ld	r24, Z
    2b62:	88 2f       	mov	r24, r24
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	84 70       	andi	r24, 0x04	; 4
    2b68:	90 70       	andi	r25, 0x00	; 0
    2b6a:	95 95       	asr	r25
    2b6c:	87 95       	ror	r24
    2b6e:	95 95       	asr	r25
    2b70:	87 95       	ror	r24
    2b72:	98 2f       	mov	r25, r24
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	65 e0       	ldi	r22, 0x05	; 5
    2b78:	49 2f       	mov	r20, r25
    2b7a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2b7e:	fe 01       	movw	r30, r28
    2b80:	ed 59       	subi	r30, 0x9D	; 157
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	80 81       	ld	r24, Z
    2b86:	88 2f       	mov	r24, r24
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	88 70       	andi	r24, 0x08	; 8
    2b8c:	90 70       	andi	r25, 0x00	; 0
    2b8e:	95 95       	asr	r25
    2b90:	87 95       	ror	r24
    2b92:	95 95       	asr	r25
    2b94:	87 95       	ror	r24
    2b96:	95 95       	asr	r25
    2b98:	87 95       	ror	r24
    2b9a:	98 2f       	mov	r25, r24
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	66 e0       	ldi	r22, 0x06	; 6
    2ba0:	49 2f       	mov	r20, r25
    2ba2:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	a0 e8       	ldi	r26, 0x80	; 128
    2bac:	bf e3       	ldi	r27, 0x3F	; 63
    2bae:	89 8f       	std	Y+25, r24	; 0x19
    2bb0:	9a 8f       	std	Y+26, r25	; 0x1a
    2bb2:	ab 8f       	std	Y+27, r26	; 0x1b
    2bb4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb6:	69 8d       	ldd	r22, Y+25	; 0x19
    2bb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bbe:	20 e0       	ldi	r18, 0x00	; 0
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	4a e7       	ldi	r20, 0x7A	; 122
    2bc4:	55 e4       	ldi	r21, 0x45	; 69
    2bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	8d 8b       	std	Y+21, r24	; 0x15
    2bd0:	9e 8b       	std	Y+22, r25	; 0x16
    2bd2:	af 8b       	std	Y+23, r26	; 0x17
    2bd4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bd6:	6d 89       	ldd	r22, Y+21	; 0x15
    2bd8:	7e 89       	ldd	r23, Y+22	; 0x16
    2bda:	8f 89       	ldd	r24, Y+23	; 0x17
    2bdc:	98 8d       	ldd	r25, Y+24	; 0x18
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	40 e8       	ldi	r20, 0x80	; 128
    2be4:	5f e3       	ldi	r21, 0x3F	; 63
    2be6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bea:	88 23       	and	r24, r24
    2bec:	2c f4       	brge	.+10     	; 0x2bf8 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	9c 8b       	std	Y+20, r25	; 0x14
    2bf4:	8b 8b       	std	Y+19, r24	; 0x13
    2bf6:	3f c0       	rjmp	.+126    	; 0x2c76 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2bf8:	6d 89       	ldd	r22, Y+21	; 0x15
    2bfa:	7e 89       	ldd	r23, Y+22	; 0x16
    2bfc:	8f 89       	ldd	r24, Y+23	; 0x17
    2bfe:	98 8d       	ldd	r25, Y+24	; 0x18
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	3f ef       	ldi	r19, 0xFF	; 255
    2c04:	4f e7       	ldi	r20, 0x7F	; 127
    2c06:	57 e4       	ldi	r21, 0x47	; 71
    2c08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c0c:	18 16       	cp	r1, r24
    2c0e:	4c f5       	brge	.+82     	; 0x2c62 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c10:	69 8d       	ldd	r22, Y+25	; 0x19
    2c12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	40 e2       	ldi	r20, 0x20	; 32
    2c1e:	51 e4       	ldi	r21, 0x41	; 65
    2c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	bc 01       	movw	r22, r24
    2c2a:	cd 01       	movw	r24, r26
    2c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	9c 8b       	std	Y+20, r25	; 0x14
    2c36:	8b 8b       	std	Y+19, r24	; 0x13
    2c38:	0f c0       	rjmp	.+30     	; 0x2c58 <LCD_displayCharacter+0x7be>
    2c3a:	80 e9       	ldi	r24, 0x90	; 144
    2c3c:	91 e0       	ldi	r25, 0x01	; 1
    2c3e:	9a 8b       	std	Y+18, r25	; 0x12
    2c40:	89 8b       	std	Y+17, r24	; 0x11
    2c42:	89 89       	ldd	r24, Y+17	; 0x11
    2c44:	9a 89       	ldd	r25, Y+18	; 0x12
    2c46:	01 97       	sbiw	r24, 0x01	; 1
    2c48:	f1 f7       	brne	.-4      	; 0x2c46 <LCD_displayCharacter+0x7ac>
    2c4a:	9a 8b       	std	Y+18, r25	; 0x12
    2c4c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c50:	9c 89       	ldd	r25, Y+20	; 0x14
    2c52:	01 97       	sbiw	r24, 0x01	; 1
    2c54:	9c 8b       	std	Y+20, r25	; 0x14
    2c56:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c58:	8b 89       	ldd	r24, Y+19	; 0x13
    2c5a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c5c:	00 97       	sbiw	r24, 0x00	; 0
    2c5e:	69 f7       	brne	.-38     	; 0x2c3a <LCD_displayCharacter+0x7a0>
    2c60:	14 c0       	rjmp	.+40     	; 0x2c8a <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c62:	6d 89       	ldd	r22, Y+21	; 0x15
    2c64:	7e 89       	ldd	r23, Y+22	; 0x16
    2c66:	8f 89       	ldd	r24, Y+23	; 0x17
    2c68:	98 8d       	ldd	r25, Y+24	; 0x18
    2c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	9c 8b       	std	Y+20, r25	; 0x14
    2c74:	8b 8b       	std	Y+19, r24	; 0x13
    2c76:	8b 89       	ldd	r24, Y+19	; 0x13
    2c78:	9c 89       	ldd	r25, Y+20	; 0x14
    2c7a:	98 8b       	std	Y+16, r25	; 0x10
    2c7c:	8f 87       	std	Y+15, r24	; 0x0f
    2c7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c80:	98 89       	ldd	r25, Y+16	; 0x10
    2c82:	01 97       	sbiw	r24, 0x01	; 1
    2c84:	f1 f7       	brne	.-4      	; 0x2c82 <LCD_displayCharacter+0x7e8>
    2c86:	98 8b       	std	Y+16, r25	; 0x10
    2c88:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	62 e0       	ldi	r22, 0x02	; 2
    2c8e:	40 e0       	ldi	r20, 0x00	; 0
    2c90:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	a0 e8       	ldi	r26, 0x80	; 128
    2c9a:	bf e3       	ldi	r27, 0x3F	; 63
    2c9c:	8b 87       	std	Y+11, r24	; 0x0b
    2c9e:	9c 87       	std	Y+12, r25	; 0x0c
    2ca0:	ad 87       	std	Y+13, r26	; 0x0d
    2ca2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2caa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	4a e7       	ldi	r20, 0x7A	; 122
    2cb2:	55 e4       	ldi	r21, 0x45	; 69
    2cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	8f 83       	std	Y+7, r24	; 0x07
    2cbe:	98 87       	std	Y+8, r25	; 0x08
    2cc0:	a9 87       	std	Y+9, r26	; 0x09
    2cc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cc4:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc6:	78 85       	ldd	r23, Y+8	; 0x08
    2cc8:	89 85       	ldd	r24, Y+9	; 0x09
    2cca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	40 e8       	ldi	r20, 0x80	; 128
    2cd2:	5f e3       	ldi	r21, 0x3F	; 63
    2cd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cd8:	88 23       	and	r24, r24
    2cda:	2c f4       	brge	.+10     	; 0x2ce6 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	9e 83       	std	Y+6, r25	; 0x06
    2ce2:	8d 83       	std	Y+5, r24	; 0x05
    2ce4:	3f c0       	rjmp	.+126    	; 0x2d64 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce8:	78 85       	ldd	r23, Y+8	; 0x08
    2cea:	89 85       	ldd	r24, Y+9	; 0x09
    2cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	3f ef       	ldi	r19, 0xFF	; 255
    2cf2:	4f e7       	ldi	r20, 0x7F	; 127
    2cf4:	57 e4       	ldi	r21, 0x47	; 71
    2cf6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cfa:	18 16       	cp	r1, r24
    2cfc:	4c f5       	brge	.+82     	; 0x2d50 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	40 e2       	ldi	r20, 0x20	; 32
    2d0c:	51 e4       	ldi	r21, 0x41	; 65
    2d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d12:	dc 01       	movw	r26, r24
    2d14:	cb 01       	movw	r24, r22
    2d16:	bc 01       	movw	r22, r24
    2d18:	cd 01       	movw	r24, r26
    2d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	9e 83       	std	Y+6, r25	; 0x06
    2d24:	8d 83       	std	Y+5, r24	; 0x05
    2d26:	0f c0       	rjmp	.+30     	; 0x2d46 <LCD_displayCharacter+0x8ac>
    2d28:	80 e9       	ldi	r24, 0x90	; 144
    2d2a:	91 e0       	ldi	r25, 0x01	; 1
    2d2c:	9c 83       	std	Y+4, r25	; 0x04
    2d2e:	8b 83       	std	Y+3, r24	; 0x03
    2d30:	8b 81       	ldd	r24, Y+3	; 0x03
    2d32:	9c 81       	ldd	r25, Y+4	; 0x04
    2d34:	01 97       	sbiw	r24, 0x01	; 1
    2d36:	f1 f7       	brne	.-4      	; 0x2d34 <LCD_displayCharacter+0x89a>
    2d38:	9c 83       	std	Y+4, r25	; 0x04
    2d3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d40:	01 97       	sbiw	r24, 0x01	; 1
    2d42:	9e 83       	std	Y+6, r25	; 0x06
    2d44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d46:	8d 81       	ldd	r24, Y+5	; 0x05
    2d48:	9e 81       	ldd	r25, Y+6	; 0x06
    2d4a:	00 97       	sbiw	r24, 0x00	; 0
    2d4c:	69 f7       	brne	.-38     	; 0x2d28 <LCD_displayCharacter+0x88e>
    2d4e:	14 c0       	rjmp	.+40     	; 0x2d78 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d50:	6f 81       	ldd	r22, Y+7	; 0x07
    2d52:	78 85       	ldd	r23, Y+8	; 0x08
    2d54:	89 85       	ldd	r24, Y+9	; 0x09
    2d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	9e 83       	std	Y+6, r25	; 0x06
    2d62:	8d 83       	std	Y+5, r24	; 0x05
    2d64:	8d 81       	ldd	r24, Y+5	; 0x05
    2d66:	9e 81       	ldd	r25, Y+6	; 0x06
    2d68:	9a 83       	std	Y+2, r25	; 0x02
    2d6a:	89 83       	std	Y+1, r24	; 0x01
    2d6c:	89 81       	ldd	r24, Y+1	; 0x01
    2d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	f1 f7       	brne	.-4      	; 0x2d70 <LCD_displayCharacter+0x8d6>
    2d74:	9a 83       	std	Y+2, r25	; 0x02
    2d76:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2d78:	cd 59       	subi	r28, 0x9D	; 157
    2d7a:	df 4f       	sbci	r29, 0xFF	; 255
    2d7c:	0f b6       	in	r0, 0x3f	; 63
    2d7e:	f8 94       	cli
    2d80:	de bf       	out	0x3e, r29	; 62
    2d82:	0f be       	out	0x3f, r0	; 63
    2d84:	cd bf       	out	0x3d, r28	; 61
    2d86:	cf 91       	pop	r28
    2d88:	df 91       	pop	r29
    2d8a:	1f 91       	pop	r17
    2d8c:	0f 91       	pop	r16
    2d8e:	08 95       	ret

00002d90 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2d90:	df 93       	push	r29
    2d92:	cf 93       	push	r28
    2d94:	00 d0       	rcall	.+0      	; 0x2d96 <LCD_displayString+0x6>
    2d96:	0f 92       	push	r0
    2d98:	cd b7       	in	r28, 0x3d	; 61
    2d9a:	de b7       	in	r29, 0x3e	; 62
    2d9c:	9b 83       	std	Y+3, r25	; 0x03
    2d9e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2da0:	19 82       	std	Y+1, r1	; 0x01
    2da2:	0e c0       	rjmp	.+28     	; 0x2dc0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2da4:	89 81       	ldd	r24, Y+1	; 0x01
    2da6:	28 2f       	mov	r18, r24
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dac:	9b 81       	ldd	r25, Y+3	; 0x03
    2dae:	fc 01       	movw	r30, r24
    2db0:	e2 0f       	add	r30, r18
    2db2:	f3 1f       	adc	r31, r19
    2db4:	80 81       	ld	r24, Z
    2db6:	0e 94 4d 12 	call	0x249a	; 0x249a <LCD_displayCharacter>
		i++;
    2dba:	89 81       	ldd	r24, Y+1	; 0x01
    2dbc:	8f 5f       	subi	r24, 0xFF	; 255
    2dbe:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	28 2f       	mov	r18, r24
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2dca:	fc 01       	movw	r30, r24
    2dcc:	e2 0f       	add	r30, r18
    2dce:	f3 1f       	adc	r31, r19
    2dd0:	80 81       	ld	r24, Z
    2dd2:	88 23       	and	r24, r24
    2dd4:	39 f7       	brne	.-50     	; 0x2da4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2dd6:	0f 90       	pop	r0
    2dd8:	0f 90       	pop	r0
    2dda:	0f 90       	pop	r0
    2ddc:	cf 91       	pop	r28
    2dde:	df 91       	pop	r29
    2de0:	08 95       	ret

00002de2 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2de2:	df 93       	push	r29
    2de4:	cf 93       	push	r28
    2de6:	00 d0       	rcall	.+0      	; 0x2de8 <LCD_moveCursor+0x6>
    2de8:	00 d0       	rcall	.+0      	; 0x2dea <LCD_moveCursor+0x8>
    2dea:	0f 92       	push	r0
    2dec:	cd b7       	in	r28, 0x3d	; 61
    2dee:	de b7       	in	r29, 0x3e	; 62
    2df0:	8a 83       	std	Y+2, r24	; 0x02
    2df2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2df4:	8a 81       	ldd	r24, Y+2	; 0x02
    2df6:	28 2f       	mov	r18, r24
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	3d 83       	std	Y+5, r19	; 0x05
    2dfc:	2c 83       	std	Y+4, r18	; 0x04
    2dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    2e00:	9d 81       	ldd	r25, Y+5	; 0x05
    2e02:	81 30       	cpi	r24, 0x01	; 1
    2e04:	91 05       	cpc	r25, r1
    2e06:	c1 f0       	breq	.+48     	; 0x2e38 <LCD_moveCursor+0x56>
    2e08:	2c 81       	ldd	r18, Y+4	; 0x04
    2e0a:	3d 81       	ldd	r19, Y+5	; 0x05
    2e0c:	22 30       	cpi	r18, 0x02	; 2
    2e0e:	31 05       	cpc	r19, r1
    2e10:	2c f4       	brge	.+10     	; 0x2e1c <LCD_moveCursor+0x3a>
    2e12:	8c 81       	ldd	r24, Y+4	; 0x04
    2e14:	9d 81       	ldd	r25, Y+5	; 0x05
    2e16:	00 97       	sbiw	r24, 0x00	; 0
    2e18:	61 f0       	breq	.+24     	; 0x2e32 <LCD_moveCursor+0x50>
    2e1a:	19 c0       	rjmp	.+50     	; 0x2e4e <LCD_moveCursor+0x6c>
    2e1c:	2c 81       	ldd	r18, Y+4	; 0x04
    2e1e:	3d 81       	ldd	r19, Y+5	; 0x05
    2e20:	22 30       	cpi	r18, 0x02	; 2
    2e22:	31 05       	cpc	r19, r1
    2e24:	69 f0       	breq	.+26     	; 0x2e40 <LCD_moveCursor+0x5e>
    2e26:	8c 81       	ldd	r24, Y+4	; 0x04
    2e28:	9d 81       	ldd	r25, Y+5	; 0x05
    2e2a:	83 30       	cpi	r24, 0x03	; 3
    2e2c:	91 05       	cpc	r25, r1
    2e2e:	61 f0       	breq	.+24     	; 0x2e48 <LCD_moveCursor+0x66>
    2e30:	0e c0       	rjmp	.+28     	; 0x2e4e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2e32:	8b 81       	ldd	r24, Y+3	; 0x03
    2e34:	89 83       	std	Y+1, r24	; 0x01
    2e36:	0b c0       	rjmp	.+22     	; 0x2e4e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2e38:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3a:	80 5c       	subi	r24, 0xC0	; 192
    2e3c:	89 83       	std	Y+1, r24	; 0x01
    2e3e:	07 c0       	rjmp	.+14     	; 0x2e4e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2e40:	8b 81       	ldd	r24, Y+3	; 0x03
    2e42:	80 5f       	subi	r24, 0xF0	; 240
    2e44:	89 83       	std	Y+1, r24	; 0x01
    2e46:	03 c0       	rjmp	.+6      	; 0x2e4e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2e48:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4a:	80 5b       	subi	r24, 0xB0	; 176
    2e4c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	80 68       	ori	r24, 0x80	; 128
    2e52:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <LCD_sendCommand>
}
    2e56:	0f 90       	pop	r0
    2e58:	0f 90       	pop	r0
    2e5a:	0f 90       	pop	r0
    2e5c:	0f 90       	pop	r0
    2e5e:	0f 90       	pop	r0
    2e60:	cf 91       	pop	r28
    2e62:	df 91       	pop	r29
    2e64:	08 95       	ret

00002e66 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2e66:	df 93       	push	r29
    2e68:	cf 93       	push	r28
    2e6a:	00 d0       	rcall	.+0      	; 0x2e6c <LCD_displayStringRowColumn+0x6>
    2e6c:	00 d0       	rcall	.+0      	; 0x2e6e <LCD_displayStringRowColumn+0x8>
    2e6e:	cd b7       	in	r28, 0x3d	; 61
    2e70:	de b7       	in	r29, 0x3e	; 62
    2e72:	89 83       	std	Y+1, r24	; 0x01
    2e74:	6a 83       	std	Y+2, r22	; 0x02
    2e76:	5c 83       	std	Y+4, r21	; 0x04
    2e78:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2e7a:	89 81       	ldd	r24, Y+1	; 0x01
    2e7c:	6a 81       	ldd	r22, Y+2	; 0x02
    2e7e:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2e82:	8b 81       	ldd	r24, Y+3	; 0x03
    2e84:	9c 81       	ldd	r25, Y+4	; 0x04
    2e86:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_displayString>
}
    2e8a:	0f 90       	pop	r0
    2e8c:	0f 90       	pop	r0
    2e8e:	0f 90       	pop	r0
    2e90:	0f 90       	pop	r0
    2e92:	cf 91       	pop	r28
    2e94:	df 91       	pop	r29
    2e96:	08 95       	ret

00002e98 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2e98:	df 93       	push	r29
    2e9a:	cf 93       	push	r28
    2e9c:	cd b7       	in	r28, 0x3d	; 61
    2e9e:	de b7       	in	r29, 0x3e	; 62
    2ea0:	62 97       	sbiw	r28, 0x12	; 18
    2ea2:	0f b6       	in	r0, 0x3f	; 63
    2ea4:	f8 94       	cli
    2ea6:	de bf       	out	0x3e, r29	; 62
    2ea8:	0f be       	out	0x3f, r0	; 63
    2eaa:	cd bf       	out	0x3d, r28	; 61
    2eac:	9a 8b       	std	Y+18, r25	; 0x12
    2eae:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2eb0:	89 89       	ldd	r24, Y+17	; 0x11
    2eb2:	9a 89       	ldd	r25, Y+18	; 0x12
    2eb4:	9e 01       	movw	r18, r28
    2eb6:	2f 5f       	subi	r18, 0xFF	; 255
    2eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    2eba:	b9 01       	movw	r22, r18
    2ebc:	4a e0       	ldi	r20, 0x0A	; 10
    2ebe:	50 e0       	ldi	r21, 0x00	; 0
    2ec0:	0e 94 8d 19 	call	0x331a	; 0x331a <itoa>
   LCD_displayString(buff); /* Display the string */
    2ec4:	ce 01       	movw	r24, r28
    2ec6:	01 96       	adiw	r24, 0x01	; 1
    2ec8:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_displayString>
}
    2ecc:	62 96       	adiw	r28, 0x12	; 18
    2ece:	0f b6       	in	r0, 0x3f	; 63
    2ed0:	f8 94       	cli
    2ed2:	de bf       	out	0x3e, r29	; 62
    2ed4:	0f be       	out	0x3f, r0	; 63
    2ed6:	cd bf       	out	0x3d, r28	; 61
    2ed8:	cf 91       	pop	r28
    2eda:	df 91       	pop	r29
    2edc:	08 95       	ret

00002ede <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2ede:	df 93       	push	r29
    2ee0:	cf 93       	push	r28
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <LCD_sendCommand>
}
    2eec:	cf 91       	pop	r28
    2eee:	df 91       	pop	r29
    2ef0:	08 95       	ret

00002ef2 <LEDS_init>:
 * Description :
 * Function initializes all Leds (red, green, blue) pins direction as OUTPUT.
 * Turn off all the Leds.
 */
void LEDS_init(void)
{
    2ef2:	df 93       	push	r29
    2ef4:	cf 93       	push	r28
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
	/* Configure LED red as OUTPUT */
	GPIO_setupPinDirection(LED_RED_PORT_ID , LED_RED_PIN_ID , PIN_OUTPUT);
    2efa:	82 e0       	ldi	r24, 0x02	; 2
    2efc:	60 e0       	ldi	r22, 0x00	; 0
    2efe:	41 e0       	ldi	r20, 0x01	; 1
    2f00:	0e 94 ff 08 	call	0x11fe	; 0x11fe <GPIO_setupPinDirection>

	/* Configure LED green as OUTPUT */
	GPIO_setupPinDirection(LED_GREEN_PORT_ID , LED_GREEN_PIN_ID , PIN_OUTPUT);
    2f04:	82 e0       	ldi	r24, 0x02	; 2
    2f06:	61 e0       	ldi	r22, 0x01	; 1
    2f08:	41 e0       	ldi	r20, 0x01	; 1
    2f0a:	0e 94 ff 08 	call	0x11fe	; 0x11fe <GPIO_setupPinDirection>

	/* Configure LED blue as OUTPUT */
	GPIO_setupPinDirection(LED_BLUE_PORT_ID , LED_BLUE_PIN_ID , PIN_OUTPUT);
    2f0e:	82 e0       	ldi	r24, 0x02	; 2
    2f10:	62 e0       	ldi	r22, 0x02	; 2
    2f12:	41 e0       	ldi	r20, 0x01	; 1
    2f14:	0e 94 ff 08 	call	0x11fe	; 0x11fe <GPIO_setupPinDirection>

#ifdef POSITIVE_LOGIC
	/* Turn OFF all LED */
	GPIO_writePin(LED_RED_PORT_ID , LED_RED_PIN_ID , LOGIC_LOW);
    2f18:	82 e0       	ldi	r24, 0x02	; 2
    2f1a:	60 e0       	ldi	r22, 0x00	; 0
    2f1c:	40 e0       	ldi	r20, 0x00	; 0
    2f1e:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
	GPIO_writePin(LED_GREEN_PORT_ID , LED_GREEN_PIN_ID , LOGIC_LOW);
    2f22:	82 e0       	ldi	r24, 0x02	; 2
    2f24:	61 e0       	ldi	r22, 0x01	; 1
    2f26:	40 e0       	ldi	r20, 0x00	; 0
    2f28:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
	GPIO_writePin(LED_BLUE_PORT_ID , LED_BLUE_PIN_ID , LOGIC_LOW);
    2f2c:	82 e0       	ldi	r24, 0x02	; 2
    2f2e:	62 e0       	ldi	r22, 0x02	; 2
    2f30:	40 e0       	ldi	r20, 0x00	; 0
    2f32:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
	GPIO_writePin(LED_RED_PORT_ID , LED_RED_PIN_ID , LOGIC_HIGH);
	GPIO_writePin(LED_GREEN_PORT_ID , LED_GREEN_PIN_ID , LOGIC_HIGH);
	GPIO_writePin(LED_BLUE_PORT_ID , LED_BLUE_PIN_ID , LOGIC_HIGH);
#endif

}
    2f36:	cf 91       	pop	r28
    2f38:	df 91       	pop	r29
    2f3a:	08 95       	ret

00002f3c <LED_on>:
/*
 * Description :
 * Function Turns ON the specified LED.
 */
void LED_on(LED_ID id)
{
    2f3c:	df 93       	push	r29
    2f3e:	cf 93       	push	r28
    2f40:	00 d0       	rcall	.+0      	; 0x2f42 <LED_on+0x6>
    2f42:	0f 92       	push	r0
    2f44:	cd b7       	in	r28, 0x3d	; 61
    2f46:	de b7       	in	r29, 0x3e	; 62
    2f48:	89 83       	std	Y+1, r24	; 0x01

#ifdef POSITIVE_LOGIC
	switch(id)
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	28 2f       	mov	r18, r24
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	3b 83       	std	Y+3, r19	; 0x03
    2f52:	2a 83       	std	Y+2, r18	; 0x02
    2f54:	8a 81       	ldd	r24, Y+2	; 0x02
    2f56:	9b 81       	ldd	r25, Y+3	; 0x03
    2f58:	81 30       	cpi	r24, 0x01	; 1
    2f5a:	91 05       	cpc	r25, r1
    2f5c:	79 f0       	breq	.+30     	; 0x2f7c <LED_on+0x40>
    2f5e:	2a 81       	ldd	r18, Y+2	; 0x02
    2f60:	3b 81       	ldd	r19, Y+3	; 0x03
    2f62:	22 30       	cpi	r18, 0x02	; 2
    2f64:	31 05       	cpc	r19, r1
    2f66:	81 f0       	breq	.+32     	; 0x2f88 <LED_on+0x4c>
    2f68:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f6c:	00 97       	sbiw	r24, 0x00	; 0
    2f6e:	89 f4       	brne	.+34     	; 0x2f92 <LED_on+0x56>
	{
	case LED_RED:
		/* Turn ON LED Red */
		GPIO_writePin(LED_RED_PORT_ID , LED_RED_PIN_ID , LOGIC_HIGH);
    2f70:	82 e0       	ldi	r24, 0x02	; 2
    2f72:	60 e0       	ldi	r22, 0x00	; 0
    2f74:	41 e0       	ldi	r20, 0x01	; 1
    2f76:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
    2f7a:	0b c0       	rjmp	.+22     	; 0x2f92 <LED_on+0x56>
		break;
	case LED_GREEN:
		/* Turn ON LED Green */
		GPIO_writePin(LED_GREEN_PORT_ID , LED_GREEN_PIN_ID , LOGIC_HIGH);
    2f7c:	82 e0       	ldi	r24, 0x02	; 2
    2f7e:	61 e0       	ldi	r22, 0x01	; 1
    2f80:	41 e0       	ldi	r20, 0x01	; 1
    2f82:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
    2f86:	05 c0       	rjmp	.+10     	; 0x2f92 <LED_on+0x56>
		break;
	case LED_BLUE:
		/* Turn ON LED Blue */
		GPIO_writePin(LED_BLUE_PORT_ID , LED_BLUE_PIN_ID , LOGIC_HIGH);
    2f88:	82 e0       	ldi	r24, 0x02	; 2
    2f8a:	62 e0       	ldi	r22, 0x02	; 2
    2f8c:	41 e0       	ldi	r20, 0x01	; 1
    2f8e:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
		/* Turn ON LED Blue */
		GPIO_writePin(LED_BLUE_PORT_ID , LED_BLUE_PIN_ID , LOGIC_LOW);
		break;
	}
#endif
}
    2f92:	0f 90       	pop	r0
    2f94:	0f 90       	pop	r0
    2f96:	0f 90       	pop	r0
    2f98:	cf 91       	pop	r28
    2f9a:	df 91       	pop	r29
    2f9c:	08 95       	ret

00002f9e <LED_off>:
/*
 * Description :
 * Function Turns OFF the specified LED.
 */
void LED_off(LED_ID id)
{
    2f9e:	df 93       	push	r29
    2fa0:	cf 93       	push	r28
    2fa2:	00 d0       	rcall	.+0      	; 0x2fa4 <LED_off+0x6>
    2fa4:	0f 92       	push	r0
    2fa6:	cd b7       	in	r28, 0x3d	; 61
    2fa8:	de b7       	in	r29, 0x3e	; 62
    2faa:	89 83       	std	Y+1, r24	; 0x01
#ifdef POSITIVE_LOGIC
	switch(id)
    2fac:	89 81       	ldd	r24, Y+1	; 0x01
    2fae:	28 2f       	mov	r18, r24
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	3b 83       	std	Y+3, r19	; 0x03
    2fb4:	2a 83       	std	Y+2, r18	; 0x02
    2fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fba:	81 30       	cpi	r24, 0x01	; 1
    2fbc:	91 05       	cpc	r25, r1
    2fbe:	79 f0       	breq	.+30     	; 0x2fde <LED_off+0x40>
    2fc0:	2a 81       	ldd	r18, Y+2	; 0x02
    2fc2:	3b 81       	ldd	r19, Y+3	; 0x03
    2fc4:	22 30       	cpi	r18, 0x02	; 2
    2fc6:	31 05       	cpc	r19, r1
    2fc8:	81 f0       	breq	.+32     	; 0x2fea <LED_off+0x4c>
    2fca:	8a 81       	ldd	r24, Y+2	; 0x02
    2fcc:	9b 81       	ldd	r25, Y+3	; 0x03
    2fce:	00 97       	sbiw	r24, 0x00	; 0
    2fd0:	89 f4       	brne	.+34     	; 0x2ff4 <LED_off+0x56>
	{
	case LED_RED:
		/* Turn OFF LED Red */
		GPIO_writePin(LED_RED_PORT_ID , LED_RED_PIN_ID , LOGIC_LOW);
    2fd2:	82 e0       	ldi	r24, 0x02	; 2
    2fd4:	60 e0       	ldi	r22, 0x00	; 0
    2fd6:	40 e0       	ldi	r20, 0x00	; 0
    2fd8:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
    2fdc:	0b c0       	rjmp	.+22     	; 0x2ff4 <LED_off+0x56>
		break;
	case LED_GREEN:
		/* Turn OFF LED Green */
		GPIO_writePin(LED_GREEN_PORT_ID , LED_GREEN_PIN_ID , LOGIC_LOW);
    2fde:	82 e0       	ldi	r24, 0x02	; 2
    2fe0:	61 e0       	ldi	r22, 0x01	; 1
    2fe2:	40 e0       	ldi	r20, 0x00	; 0
    2fe4:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
    2fe8:	05 c0       	rjmp	.+10     	; 0x2ff4 <LED_off+0x56>
		break;
	case LED_BLUE:
		/* Turn OFF LED Blue */
		GPIO_writePin(LED_BLUE_PORT_ID , LED_BLUE_PIN_ID , LOGIC_LOW);
    2fea:	82 e0       	ldi	r24, 0x02	; 2
    2fec:	62 e0       	ldi	r22, 0x02	; 2
    2fee:	40 e0       	ldi	r20, 0x00	; 0
    2ff0:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
		/* Turn OFF LED Blue */
		GPIO_writePin(LED_BLUE_PORT_ID , LED_BLUE_PIN_ID , LOGIC_HIGH);
		break;
	}
#endif
}
    2ff4:	0f 90       	pop	r0
    2ff6:	0f 90       	pop	r0
    2ff8:	0f 90       	pop	r0
    2ffa:	cf 91       	pop	r28
    2ffc:	df 91       	pop	r29
    2ffe:	08 95       	ret

00003000 <Ultrasonic_init>:
 * Function Initialize the ICU driver as required.
 * Set up the ICU callback function.
 * Set the direction for the trigger pin as output through the GPIO driver.
 */
void Ultrasonic_init(void)
{
    3000:	df 93       	push	r29
    3002:	cf 93       	push	r28
    3004:	00 d0       	rcall	.+0      	; 0x3006 <Ultrasonic_init+0x6>
    3006:	cd b7       	in	r28, 0x3d	; 61
    3008:	de b7       	in	r29, 0x3e	; 62
	/* Create configuration structure for ICU driver and wait for the RAISING edge at the beginning */
	ICU_ConfigType ICU_Configurations = { F_CPU_8 , RAISING };
    300a:	82 e0       	ldi	r24, 0x02	; 2
    300c:	89 83       	std	Y+1, r24	; 0x01
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	8a 83       	std	Y+2, r24	; 0x02

	/* Initialize ICU driver */
	ICU_init(&ICU_Configurations);
    3012:	ce 01       	movw	r24, r28
    3014:	01 96       	adiw	r24, 0x01	; 1
    3016:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <ICU_init>

	/* Set the Call back function pointer in the ICU driver */
	ICU_setCallBack(Ultrasonic_edgeProcessing);
    301a:	8c e2       	ldi	r24, 0x2C	; 44
    301c:	99 e1       	ldi	r25, 0x19	; 25
    301e:	0e 94 b9 0c 	call	0x1972	; 0x1972 <ICU_setCallBack>

	/* Configure trigger pin as OUTPUT pin */
	GPIO_setupPinDirection(ULTRASONIC_SENSOR_TRIGGER_PORT_ID , ULTRASONIC_SENSOR_TRIGGER_PIN_ID , PIN_OUTPUT);
    3022:	83 e0       	ldi	r24, 0x03	; 3
    3024:	67 e0       	ldi	r22, 0x07	; 7
    3026:	41 e0       	ldi	r20, 0x01	; 1
    3028:	0e 94 ff 08 	call	0x11fe	; 0x11fe <GPIO_setupPinDirection>
	GPIO_writePin(ULTRASONIC_SENSOR_TRIGGER_PORT_ID , ULTRASONIC_SENSOR_TRIGGER_PIN_ID , LOGIC_LOW);
    302c:	83 e0       	ldi	r24, 0x03	; 3
    302e:	67 e0       	ldi	r22, 0x07	; 7
    3030:	40 e0       	ldi	r20, 0x00	; 0
    3032:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
}
    3036:	0f 90       	pop	r0
    3038:	0f 90       	pop	r0
    303a:	cf 91       	pop	r28
    303c:	df 91       	pop	r29
    303e:	08 95       	ret

00003040 <Ultrasonic_Trigger>:
/*
 * Description :
 * Function responsible for Sending the trigger pulse to the UltraSonic sensor.
 */
void Ultrasonic_Trigger(void)
{
    3040:	df 93       	push	r29
    3042:	cf 93       	push	r28
    3044:	cd b7       	in	r28, 0x3d	; 61
    3046:	de b7       	in	r29, 0x3e	; 62
    3048:	68 97       	sbiw	r28, 0x18	; 24
    304a:	0f b6       	in	r0, 0x3f	; 63
    304c:	f8 94       	cli
    304e:	de bf       	out	0x3e, r29	; 62
    3050:	0f be       	out	0x3f, r0	; 63
    3052:	cd bf       	out	0x3d, r28	; 61
	/* Send trigger pulse 10 uSec to ultraSoinc */
	GPIO_writePin(ULTRASONIC_SENSOR_TRIGGER_PORT_ID , ULTRASONIC_SENSOR_TRIGGER_PIN_ID , LOGIC_HIGH);
    3054:	83 e0       	ldi	r24, 0x03	; 3
    3056:	67 e0       	ldi	r22, 0x07	; 7
    3058:	41 e0       	ldi	r20, 0x01	; 1
    305a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	a0 e2       	ldi	r26, 0x20	; 32
    3064:	b1 e4       	ldi	r27, 0x41	; 65
    3066:	8d 8b       	std	Y+21, r24	; 0x15
    3068:	9e 8b       	std	Y+22, r25	; 0x16
    306a:	af 8b       	std	Y+23, r26	; 0x17
    306c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    306e:	6d 89       	ldd	r22, Y+21	; 0x15
    3070:	7e 89       	ldd	r23, Y+22	; 0x16
    3072:	8f 89       	ldd	r24, Y+23	; 0x17
    3074:	98 8d       	ldd	r25, Y+24	; 0x18
    3076:	2b ea       	ldi	r18, 0xAB	; 171
    3078:	3a ea       	ldi	r19, 0xAA	; 170
    307a:	4a ea       	ldi	r20, 0xAA	; 170
    307c:	50 e4       	ldi	r21, 0x40	; 64
    307e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3082:	dc 01       	movw	r26, r24
    3084:	cb 01       	movw	r24, r22
    3086:	89 8b       	std	Y+17, r24	; 0x11
    3088:	9a 8b       	std	Y+18, r25	; 0x12
    308a:	ab 8b       	std	Y+19, r26	; 0x13
    308c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    308e:	69 89       	ldd	r22, Y+17	; 0x11
    3090:	7a 89       	ldd	r23, Y+18	; 0x12
    3092:	8b 89       	ldd	r24, Y+19	; 0x13
    3094:	9c 89       	ldd	r25, Y+20	; 0x14
    3096:	20 e0       	ldi	r18, 0x00	; 0
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	40 e8       	ldi	r20, 0x80	; 128
    309c:	5f e3       	ldi	r21, 0x3F	; 63
    309e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30a2:	88 23       	and	r24, r24
    30a4:	1c f4       	brge	.+6      	; 0x30ac <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	88 8b       	std	Y+16, r24	; 0x10
    30aa:	91 c0       	rjmp	.+290    	; 0x31ce <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    30ac:	69 89       	ldd	r22, Y+17	; 0x11
    30ae:	7a 89       	ldd	r23, Y+18	; 0x12
    30b0:	8b 89       	ldd	r24, Y+19	; 0x13
    30b2:	9c 89       	ldd	r25, Y+20	; 0x14
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	4f e7       	ldi	r20, 0x7F	; 127
    30ba:	53 e4       	ldi	r21, 0x43	; 67
    30bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30c0:	18 16       	cp	r1, r24
    30c2:	0c f0       	brlt	.+2      	; 0x30c6 <Ultrasonic_Trigger+0x86>
    30c4:	7b c0       	rjmp	.+246    	; 0x31bc <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    30c6:	6d 89       	ldd	r22, Y+21	; 0x15
    30c8:	7e 89       	ldd	r23, Y+22	; 0x16
    30ca:	8f 89       	ldd	r24, Y+23	; 0x17
    30cc:	98 8d       	ldd	r25, Y+24	; 0x18
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	4a e7       	ldi	r20, 0x7A	; 122
    30d4:	54 e4       	ldi	r21, 0x44	; 68
    30d6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	8c 87       	std	Y+12, r24	; 0x0c
    30e0:	9d 87       	std	Y+13, r25	; 0x0d
    30e2:	ae 87       	std	Y+14, r26	; 0x0e
    30e4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e6:	6c 85       	ldd	r22, Y+12	; 0x0c
    30e8:	7d 85       	ldd	r23, Y+13	; 0x0d
    30ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    30ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	4a e7       	ldi	r20, 0x7A	; 122
    30f4:	55 e4       	ldi	r21, 0x45	; 69
    30f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30fa:	dc 01       	movw	r26, r24
    30fc:	cb 01       	movw	r24, r22
    30fe:	88 87       	std	Y+8, r24	; 0x08
    3100:	99 87       	std	Y+9, r25	; 0x09
    3102:	aa 87       	std	Y+10, r26	; 0x0a
    3104:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3106:	68 85       	ldd	r22, Y+8	; 0x08
    3108:	79 85       	ldd	r23, Y+9	; 0x09
    310a:	8a 85       	ldd	r24, Y+10	; 0x0a
    310c:	9b 85       	ldd	r25, Y+11	; 0x0b
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	40 e8       	ldi	r20, 0x80	; 128
    3114:	5f e3       	ldi	r21, 0x3F	; 63
    3116:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    311a:	88 23       	and	r24, r24
    311c:	2c f4       	brge	.+10     	; 0x3128 <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    311e:	81 e0       	ldi	r24, 0x01	; 1
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	9f 83       	std	Y+7, r25	; 0x07
    3124:	8e 83       	std	Y+6, r24	; 0x06
    3126:	3f c0       	rjmp	.+126    	; 0x31a6 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    3128:	68 85       	ldd	r22, Y+8	; 0x08
    312a:	79 85       	ldd	r23, Y+9	; 0x09
    312c:	8a 85       	ldd	r24, Y+10	; 0x0a
    312e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	3f ef       	ldi	r19, 0xFF	; 255
    3134:	4f e7       	ldi	r20, 0x7F	; 127
    3136:	57 e4       	ldi	r21, 0x47	; 71
    3138:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    313c:	18 16       	cp	r1, r24
    313e:	4c f5       	brge	.+82     	; 0x3192 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3140:	6c 85       	ldd	r22, Y+12	; 0x0c
    3142:	7d 85       	ldd	r23, Y+13	; 0x0d
    3144:	8e 85       	ldd	r24, Y+14	; 0x0e
    3146:	9f 85       	ldd	r25, Y+15	; 0x0f
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	40 e2       	ldi	r20, 0x20	; 32
    314e:	51 e4       	ldi	r21, 0x41	; 65
    3150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	bc 01       	movw	r22, r24
    315a:	cd 01       	movw	r24, r26
    315c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	9f 83       	std	Y+7, r25	; 0x07
    3166:	8e 83       	std	Y+6, r24	; 0x06
    3168:	0f c0       	rjmp	.+30     	; 0x3188 <Ultrasonic_Trigger+0x148>
    316a:	80 e9       	ldi	r24, 0x90	; 144
    316c:	91 e0       	ldi	r25, 0x01	; 1
    316e:	9d 83       	std	Y+5, r25	; 0x05
    3170:	8c 83       	std	Y+4, r24	; 0x04
    3172:	8c 81       	ldd	r24, Y+4	; 0x04
    3174:	9d 81       	ldd	r25, Y+5	; 0x05
    3176:	01 97       	sbiw	r24, 0x01	; 1
    3178:	f1 f7       	brne	.-4      	; 0x3176 <Ultrasonic_Trigger+0x136>
    317a:	9d 83       	std	Y+5, r25	; 0x05
    317c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    317e:	8e 81       	ldd	r24, Y+6	; 0x06
    3180:	9f 81       	ldd	r25, Y+7	; 0x07
    3182:	01 97       	sbiw	r24, 0x01	; 1
    3184:	9f 83       	std	Y+7, r25	; 0x07
    3186:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3188:	8e 81       	ldd	r24, Y+6	; 0x06
    318a:	9f 81       	ldd	r25, Y+7	; 0x07
    318c:	00 97       	sbiw	r24, 0x00	; 0
    318e:	69 f7       	brne	.-38     	; 0x316a <Ultrasonic_Trigger+0x12a>
    3190:	24 c0       	rjmp	.+72     	; 0x31da <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3192:	68 85       	ldd	r22, Y+8	; 0x08
    3194:	79 85       	ldd	r23, Y+9	; 0x09
    3196:	8a 85       	ldd	r24, Y+10	; 0x0a
    3198:	9b 85       	ldd	r25, Y+11	; 0x0b
    319a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    319e:	dc 01       	movw	r26, r24
    31a0:	cb 01       	movw	r24, r22
    31a2:	9f 83       	std	Y+7, r25	; 0x07
    31a4:	8e 83       	std	Y+6, r24	; 0x06
    31a6:	8e 81       	ldd	r24, Y+6	; 0x06
    31a8:	9f 81       	ldd	r25, Y+7	; 0x07
    31aa:	9b 83       	std	Y+3, r25	; 0x03
    31ac:	8a 83       	std	Y+2, r24	; 0x02
    31ae:	8a 81       	ldd	r24, Y+2	; 0x02
    31b0:	9b 81       	ldd	r25, Y+3	; 0x03
    31b2:	01 97       	sbiw	r24, 0x01	; 1
    31b4:	f1 f7       	brne	.-4      	; 0x31b2 <Ultrasonic_Trigger+0x172>
    31b6:	9b 83       	std	Y+3, r25	; 0x03
    31b8:	8a 83       	std	Y+2, r24	; 0x02
    31ba:	0f c0       	rjmp	.+30     	; 0x31da <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31bc:	69 89       	ldd	r22, Y+17	; 0x11
    31be:	7a 89       	ldd	r23, Y+18	; 0x12
    31c0:	8b 89       	ldd	r24, Y+19	; 0x13
    31c2:	9c 89       	ldd	r25, Y+20	; 0x14
    31c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c8:	dc 01       	movw	r26, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	88 8b       	std	Y+16, r24	; 0x10
    31ce:	88 89       	ldd	r24, Y+16	; 0x10
    31d0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31d2:	89 81       	ldd	r24, Y+1	; 0x01
    31d4:	8a 95       	dec	r24
    31d6:	f1 f7       	brne	.-4      	; 0x31d4 <Ultrasonic_Trigger+0x194>
    31d8:	89 83       	std	Y+1, r24	; 0x01

	/* wait 10 uSec as datasheet said that */
	_delay_us(10);

	/* Stop sending pulse */
	GPIO_writePin(ULTRASONIC_SENSOR_TRIGGER_PORT_ID , ULTRASONIC_SENSOR_TRIGGER_PIN_ID , LOGIC_LOW);
    31da:	83 e0       	ldi	r24, 0x03	; 3
    31dc:	67 e0       	ldi	r22, 0x07	; 7
    31de:	40 e0       	ldi	r20, 0x00	; 0
    31e0:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <GPIO_writePin>
}
    31e4:	68 96       	adiw	r28, 0x18	; 24
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	f8 94       	cli
    31ea:	de bf       	out	0x3e, r29	; 62
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	cd bf       	out	0x3d, r28	; 61
    31f0:	cf 91       	pop	r28
    31f2:	df 91       	pop	r29
    31f4:	08 95       	ret

000031f6 <Ultrasonic_readDistance>:
 * Function Send the trigger pulse by using the Ultrasonic_Trigger function.
 * Start the measurement process via the ICU driver.
 * Return: The measured distance in centimeters.
 */
uint16 Ultrasonic_readDistance(void)
{
    31f6:	df 93       	push	r29
    31f8:	cf 93       	push	r28
    31fa:	00 d0       	rcall	.+0      	; 0x31fc <Ultrasonic_readDistance+0x6>
    31fc:	cd b7       	in	r28, 0x3d	; 61
    31fe:	de b7       	in	r29, 0x3e	; 62
	/* Define variable to store distance on it */
	uint16 distance;

	/* Send trigger pulse to Ultrasonic Sensor */
	Ultrasonic_Trigger();
    3200:	0e 94 20 18 	call	0x3040	; 0x3040 <Ultrasonic_Trigger>

	/* Wait till calculate the high time */
	while(g_Flag != 1);
    3204:	80 91 8a 01 	lds	r24, 0x018A
    3208:	81 30       	cpi	r24, 0x01	; 1
    320a:	e1 f7       	brne	.-8      	; 0x3204 <Ultrasonic_readDistance+0xe>
	 *  we have selected an 16MHz oscillator frequency for ATmega32, with
	 *  Prescaler F_CPU/8 for timer frequency,Then time to execute 1 instruction is 0.5 us.
	 * So, the timer gets incremented after 0.5 us time elapse.
	 * The distance of Object (in cm) = 17000*(Timer value)*0.5us
	 * 								  = (Timer value)/117.6  */
	distance = (float32) (g_TimeHigh / 112.1);						/* 112.1 instead of 117.6 (give me best results) in cm */
    320c:	80 91 8c 01 	lds	r24, 0x018C
    3210:	90 91 8d 01 	lds	r25, 0x018D
    3214:	cc 01       	movw	r24, r24
    3216:	a0 e0       	ldi	r26, 0x00	; 0
    3218:	b0 e0       	ldi	r27, 0x00	; 0
    321a:	bc 01       	movw	r22, r24
    321c:	cd 01       	movw	r24, r26
    321e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3222:	dc 01       	movw	r26, r24
    3224:	cb 01       	movw	r24, r22
    3226:	bc 01       	movw	r22, r24
    3228:	cd 01       	movw	r24, r26
    322a:	23 e3       	ldi	r18, 0x33	; 51
    322c:	33 e3       	ldi	r19, 0x33	; 51
    322e:	40 ee       	ldi	r20, 0xE0	; 224
    3230:	52 e4       	ldi	r21, 0x42	; 66
    3232:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3236:	dc 01       	movw	r26, r24
    3238:	cb 01       	movw	r24, r22
    323a:	bc 01       	movw	r22, r24
    323c:	cd 01       	movw	r24, r26
    323e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	9a 83       	std	Y+2, r25	; 0x02
    3248:	89 83       	std	Y+1, r24	; 0x01

	return distance;
    324a:	89 81       	ldd	r24, Y+1	; 0x01
    324c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    324e:	0f 90       	pop	r0
    3250:	0f 90       	pop	r0
    3252:	cf 91       	pop	r28
    3254:	df 91       	pop	r29
    3256:	08 95       	ret

00003258 <Ultrasonic_edgeProcessing>:
 * Description :
 * Function This is the callback function called by the ICU driver.
 * It calculates the high time (pulse time) generated by the ultrasonic sensor.
 */
void Ultrasonic_edgeProcessing(void)
{
    3258:	df 93       	push	r29
    325a:	cf 93       	push	r28
    325c:	cd b7       	in	r28, 0x3d	; 61
    325e:	de b7       	in	r29, 0x3e	; 62
	g_EdgeCount++;
    3260:	80 91 8b 01 	lds	r24, 0x018B
    3264:	8f 5f       	subi	r24, 0xFF	; 255
    3266:	80 93 8b 01 	sts	0x018B, r24
	g_Flag = 0;
    326a:	10 92 8a 01 	sts	0x018A, r1

	if(g_EdgeCount == 1)
    326e:	80 91 8b 01 	lds	r24, 0x018B
    3272:	81 30       	cpi	r24, 0x01	; 1
    3274:	31 f4       	brne	.+12     	; 0x3282 <Ultrasonic_edgeProcessing+0x2a>
	{
		/* Clear the timer counter register to start measurements from the first detected rising edge */
		ICU_clearTimerValue();
    3276:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <ICU_clearTimerValue>

		/* Detect falling edge */
		ICU_setEdgeDetectionType(FALLING);
    327a:	80 e0       	ldi	r24, 0x00	; 0
    327c:	0e 94 cb 0c 	call	0x1996	; 0x1996 <ICU_setEdgeDetectionType>
    3280:	12 c0       	rjmp	.+36     	; 0x32a6 <Ultrasonic_edgeProcessing+0x4e>
	}
	else if(g_EdgeCount == 2)
    3282:	80 91 8b 01 	lds	r24, 0x018B
    3286:	82 30       	cpi	r24, 0x02	; 2
    3288:	71 f4       	brne	.+28     	; 0x32a6 <Ultrasonic_edgeProcessing+0x4e>
	{
		/* Store the High time value */
		g_TimeHigh = ICU_getInputCaptureValue();
    328a:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <ICU_getInputCaptureValue>
    328e:	90 93 8d 01 	sts	0x018D, r25
    3292:	80 93 8c 01 	sts	0x018C, r24

		/* Detect rising edge */
		ICU_setEdgeDetectionType(RAISING);
    3296:	81 e0       	ldi	r24, 0x01	; 1
    3298:	0e 94 cb 0c 	call	0x1996	; 0x1996 <ICU_setEdgeDetectionType>
		g_EdgeCount = 0;
    329c:	10 92 8b 01 	sts	0x018B, r1

		/* Set g_flag to execute the distance measurement in the Ultrasonic_readDistance Function */
		g_Flag = 1;
    32a0:	81 e0       	ldi	r24, 0x01	; 1
    32a2:	80 93 8a 01 	sts	0x018A, r24
	}

}
    32a6:	cf 91       	pop	r28
    32a8:	df 91       	pop	r29
    32aa:	08 95       	ret

000032ac <__prologue_saves__>:
    32ac:	2f 92       	push	r2
    32ae:	3f 92       	push	r3
    32b0:	4f 92       	push	r4
    32b2:	5f 92       	push	r5
    32b4:	6f 92       	push	r6
    32b6:	7f 92       	push	r7
    32b8:	8f 92       	push	r8
    32ba:	9f 92       	push	r9
    32bc:	af 92       	push	r10
    32be:	bf 92       	push	r11
    32c0:	cf 92       	push	r12
    32c2:	df 92       	push	r13
    32c4:	ef 92       	push	r14
    32c6:	ff 92       	push	r15
    32c8:	0f 93       	push	r16
    32ca:	1f 93       	push	r17
    32cc:	cf 93       	push	r28
    32ce:	df 93       	push	r29
    32d0:	cd b7       	in	r28, 0x3d	; 61
    32d2:	de b7       	in	r29, 0x3e	; 62
    32d4:	ca 1b       	sub	r28, r26
    32d6:	db 0b       	sbc	r29, r27
    32d8:	0f b6       	in	r0, 0x3f	; 63
    32da:	f8 94       	cli
    32dc:	de bf       	out	0x3e, r29	; 62
    32de:	0f be       	out	0x3f, r0	; 63
    32e0:	cd bf       	out	0x3d, r28	; 61
    32e2:	09 94       	ijmp

000032e4 <__epilogue_restores__>:
    32e4:	2a 88       	ldd	r2, Y+18	; 0x12
    32e6:	39 88       	ldd	r3, Y+17	; 0x11
    32e8:	48 88       	ldd	r4, Y+16	; 0x10
    32ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    32ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    32ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    32f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    32f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    32f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    32f6:	b9 84       	ldd	r11, Y+9	; 0x09
    32f8:	c8 84       	ldd	r12, Y+8	; 0x08
    32fa:	df 80       	ldd	r13, Y+7	; 0x07
    32fc:	ee 80       	ldd	r14, Y+6	; 0x06
    32fe:	fd 80       	ldd	r15, Y+5	; 0x05
    3300:	0c 81       	ldd	r16, Y+4	; 0x04
    3302:	1b 81       	ldd	r17, Y+3	; 0x03
    3304:	aa 81       	ldd	r26, Y+2	; 0x02
    3306:	b9 81       	ldd	r27, Y+1	; 0x01
    3308:	ce 0f       	add	r28, r30
    330a:	d1 1d       	adc	r29, r1
    330c:	0f b6       	in	r0, 0x3f	; 63
    330e:	f8 94       	cli
    3310:	de bf       	out	0x3e, r29	; 62
    3312:	0f be       	out	0x3f, r0	; 63
    3314:	cd bf       	out	0x3d, r28	; 61
    3316:	ed 01       	movw	r28, r26
    3318:	08 95       	ret

0000331a <itoa>:
    331a:	fb 01       	movw	r30, r22
    331c:	9f 01       	movw	r18, r30
    331e:	e8 94       	clt
    3320:	42 30       	cpi	r20, 0x02	; 2
    3322:	c4 f0       	brlt	.+48     	; 0x3354 <itoa+0x3a>
    3324:	45 32       	cpi	r20, 0x25	; 37
    3326:	b4 f4       	brge	.+44     	; 0x3354 <itoa+0x3a>
    3328:	4a 30       	cpi	r20, 0x0A	; 10
    332a:	29 f4       	brne	.+10     	; 0x3336 <itoa+0x1c>
    332c:	97 fb       	bst	r25, 7
    332e:	1e f4       	brtc	.+6      	; 0x3336 <itoa+0x1c>
    3330:	90 95       	com	r25
    3332:	81 95       	neg	r24
    3334:	9f 4f       	sbci	r25, 0xFF	; 255
    3336:	64 2f       	mov	r22, r20
    3338:	77 27       	eor	r23, r23
    333a:	0e 94 be 19 	call	0x337c	; 0x337c <__udivmodhi4>
    333e:	80 5d       	subi	r24, 0xD0	; 208
    3340:	8a 33       	cpi	r24, 0x3A	; 58
    3342:	0c f0       	brlt	.+2      	; 0x3346 <itoa+0x2c>
    3344:	89 5d       	subi	r24, 0xD9	; 217
    3346:	81 93       	st	Z+, r24
    3348:	cb 01       	movw	r24, r22
    334a:	00 97       	sbiw	r24, 0x00	; 0
    334c:	a1 f7       	brne	.-24     	; 0x3336 <itoa+0x1c>
    334e:	16 f4       	brtc	.+4      	; 0x3354 <itoa+0x3a>
    3350:	5d e2       	ldi	r21, 0x2D	; 45
    3352:	51 93       	st	Z+, r21
    3354:	10 82       	st	Z, r1
    3356:	c9 01       	movw	r24, r18
    3358:	0c 94 ae 19 	jmp	0x335c	; 0x335c <strrev>

0000335c <strrev>:
    335c:	dc 01       	movw	r26, r24
    335e:	fc 01       	movw	r30, r24
    3360:	67 2f       	mov	r22, r23
    3362:	71 91       	ld	r23, Z+
    3364:	77 23       	and	r23, r23
    3366:	e1 f7       	brne	.-8      	; 0x3360 <strrev+0x4>
    3368:	32 97       	sbiw	r30, 0x02	; 2
    336a:	04 c0       	rjmp	.+8      	; 0x3374 <strrev+0x18>
    336c:	7c 91       	ld	r23, X
    336e:	6d 93       	st	X+, r22
    3370:	70 83       	st	Z, r23
    3372:	62 91       	ld	r22, -Z
    3374:	ae 17       	cp	r26, r30
    3376:	bf 07       	cpc	r27, r31
    3378:	c8 f3       	brcs	.-14     	; 0x336c <strrev+0x10>
    337a:	08 95       	ret

0000337c <__udivmodhi4>:
    337c:	aa 1b       	sub	r26, r26
    337e:	bb 1b       	sub	r27, r27
    3380:	51 e1       	ldi	r21, 0x11	; 17
    3382:	07 c0       	rjmp	.+14     	; 0x3392 <__udivmodhi4_ep>

00003384 <__udivmodhi4_loop>:
    3384:	aa 1f       	adc	r26, r26
    3386:	bb 1f       	adc	r27, r27
    3388:	a6 17       	cp	r26, r22
    338a:	b7 07       	cpc	r27, r23
    338c:	10 f0       	brcs	.+4      	; 0x3392 <__udivmodhi4_ep>
    338e:	a6 1b       	sub	r26, r22
    3390:	b7 0b       	sbc	r27, r23

00003392 <__udivmodhi4_ep>:
    3392:	88 1f       	adc	r24, r24
    3394:	99 1f       	adc	r25, r25
    3396:	5a 95       	dec	r21
    3398:	a9 f7       	brne	.-22     	; 0x3384 <__udivmodhi4_loop>
    339a:	80 95       	com	r24
    339c:	90 95       	com	r25
    339e:	bc 01       	movw	r22, r24
    33a0:	cd 01       	movw	r24, r26
    33a2:	08 95       	ret

000033a4 <_exit>:
    33a4:	f8 94       	cli

000033a6 <__stop_program>:
    33a6:	ff cf       	rjmp	.-2      	; 0x33a6 <__stop_program>
